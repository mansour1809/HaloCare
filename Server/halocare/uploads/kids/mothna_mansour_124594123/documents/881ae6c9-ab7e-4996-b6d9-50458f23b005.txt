// src/pages/kids/KidsManagement.jsx 
import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import { 
  Box, Typography, Paper, Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, Avatar, Button, IconButton, TextField, InputAdornment,
  CircularProgress, Alert, Chip, Breadcrumbs, FormControl, InputLabel, 
  Select, MenuItem, Tooltip, Card, CardContent, Grid, LinearProgress, Fab
} from '@mui/material';
import { 
  Add as AddIcon, Search as SearchIcon, Visibility as VisibilityIcon,
  Home as HomeIcon, Group as GroupIcon, Refresh as RefreshIcon,
  PlayArrow as StartIcon, Edit as EditIcon, CheckCircle as CompleteIcon,
  Dashboard as DashboardIcon, Email as EmailIcon
} from '@mui/icons-material';

import { fetchKids } from '../../Redux/features/kidsSlice';
import { fetchOnboardingStatus } from '../../Redux/features/onboardingSlice';
import Swal from 'sweetalert2';

// קומפוננטה לבאדג' סטטוס מעודכן
const OnboardingStatusChip = ({ onboardingData }) => {
  if (!onboardingData) {
    return (
      <Chip
        label="○ לא התחיל"
        color="default"
        variant="outlined"
        size="small"
        sx={{ fontWeight: 'medium', minWidth: '120px' }}
      />
    );
  }

  const { process, completionPercentage, completedForms, totalForms } = onboardingData;
  
  const getStatusConfig = () => {
    switch (process.processStatus) {
      case 'Completed':
        return { 
          color: 'success', 
          label: `✅ הושלם (${completedForms}/${totalForms})`, 
          variant: 'filled' 
        };
      case 'InProgress':
        return { 
          color: 'primary', 
          label: `⚡ בתהליך (${completionPercentage}%)`, 
          variant: 'filled' 
        };
      default:
        return { 
          color: 'info', 
          label: '🚀 התחיל', 
          variant: 'filled' 
        };
    }
  };

  const config = getStatusConfig();
  
  return (
    <Chip
      label={config.label}
      color={config.color}
      variant={config.variant}
      size="small"
      sx={{ fontWeight: 'medium', minWidth: '120px' }}
    />
  );
};

// קומפוננטה מעודכנת לפעולות
const OnboardingActions = ({ kid, onboardingData, onAction }) => {
  const getActions = () => {
    if (!onboardingData) {
      return [
        { 
          action: 'start', 
          label: 'התחל קליטה', 
          color: 'primary', 
          icon: <StartIcon />,
          tooltip: 'התחל תהליך קליטה חדש'
        }
      ];
    }

    const { process } = onboardingData;

    switch (process.processStatus) {
      case 'InProgress':
        return [
          { 
            action: 'dashboard', 
            label: 'ממשק', 
            color: 'primary', 
            icon: <DashboardIcon />,
            tooltip: 'פתח ממשק ניהול הקליטה'
          }
        ];
      case 'Completed':
        return [
          { 
            action: 'dashboard', 
            label: 'צפה', 
            color: 'success', 
            icon: <VisibilityIcon />,
            tooltip: 'צפה בסטטוס הקליטה'
          }
        ];
      default:
        return [
          { 
            action: 'start', 
            label: 'התחל', 
            color: 'primary', 
            icon: <StartIcon />,
            tooltip: 'התחל תהליך קליטה'
          }
        ];
    }
  };

  const actions = getActions();

  return (
    <Box sx={{ display: 'flex', gap: 0.5 }}>
      {actions.map((actionConfig) => (
        <Tooltip key={actionConfig.action} title={actionConfig.tooltip}>
          <IconButton
            size="small"
            onClick={() => onAction(actionConfig.action, kid.id)}
            sx={{
              backgroundColor: `${actionConfig.color}.main`,
              color: 'white',
              '&:hover': {
                backgroundColor: `${actionConfig.color}.dark`,
              }
            }}
          >
            {actionConfig.icon}
          </IconButton>
        </Tooltip>
      ))}
      
      {/* כפתור צפייה בפרופיל תמיד זמין */}
      <Tooltip title="צפייה בפרופיל הילד">
        <IconButton
          size="small"
          onClick={() => onAction('profile', kid.id)}
          sx={{
            backgroundColor: 'info.main',
            color: 'white',
            '&:hover': {
              backgroundColor: 'info.dark',
            }
          }}
        >
          <VisibilityIcon />
        </IconButton>
      </Tooltip>
    </Box>
  );
};

// קומפוננטה חדשה להצגת התקדמות מפורטת
const DetailedProgress = ({ onboardingData }) => {
  if (!onboardingData || !onboardingData.forms) {
    return <Typography variant="body2" color="text.secondary">–</Typography>;
  }

  const { forms, completionPercentage } = onboardingData;
  
  // ספירת סטטוסים
  const statusCounts = forms.reduce((acc, form) => {
    const status = form.status;
    if (status === 'completed' || status === 'completed_by_parent') {
      acc.completed++;
    } else if (status === 'in_progress') {
      acc.inProgress++;
    } else if (status === 'sent_to_parent') {
      acc.sentToParent++;
    } else {
      acc.notStarted++;
    }
    return acc;
  }, { completed: 0, inProgress: 0, sentToParent: 0, notStarted: 0 });

  return (
    <Box sx={{ minWidth: 150 }}>
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1 }}>
        <LinearProgress 
          variant="determinate" 
          value={completionPercentage} 
          sx={{ width: 100, height: 8, borderRadius: 4 }}
        />
        <Typography variant="body2" fontWeight="bold">
          {completionPercentage}%
        </Typography>
      </Box>
      
      <Box sx={{ display: 'flex', gap: 0.5, flexWrap: 'wrap' }}>
        {statusCounts.completed > 0 && (
          <Chip 
            label={`✅ ${statusCounts.completed}`} 
            size="small" 
            color="success" 
            variant="outlined"
          />
        )}
        {statusCounts.inProgress > 0 && (
          <Chip 
            label={`⚡ ${statusCounts.inProgress}`} 
            size="small" 
            color="primary" 
            variant="outlined"
          />
        )}
        {statusCounts.sentToParent > 0 && (
          <Chip 
            label={`📧 ${statusCounts.sentToParent}`} 
            size="small" 
            color="info" 
            variant="outlined"
          />
        )}
      </Box>
    </Box>
  );
};

const KidsManagement = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  const { kids, status, error } = useSelector(state => state.kids);
  
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('');
  const [onboardingData, setOnboardingData] = useState({});
  const [loading, setLoading] = useState(false);

  // טעינה ראשונית
  useEffect(() => {
    loadData();
  }, [dispatch]);

  const loadData = async () => {
    setLoading(true);
    try {
      // טעינת רשימת ילדים
      const kidsResult = await dispatch(fetchKids()).unwrap();
      
      // טעינת נתוני קליטה לכל ילד
      const onboardingPromises = kidsResult.map(async (kid) => {
        try {
          const statusResult = await dispatch(fetchOnboardingStatus(kid.id)).unwrap();
          return { kidId: kid.id, data: statusResult };
        } catch (error) {
          // אין תהליך קליטה - החזר null
          return { kidId: kid.id, data: null };
        }
      });
      
      const onboardingResults = await Promise.all(onboardingPromises);
      const onboardingMap = {};
      onboardingResults.forEach(({ kidId, data }) => {
        onboardingMap[kidId] = data;
      });
      
      setOnboardingData(onboardingMap);
      
    } catch (error) {
      console.error('Error loading data:', error);
      Swal.fire({
        icon: 'error',
        title: 'שגיאה בטעינת נתונים',
        text: error.message || 'אירעה שגיאה בטעינת הנתונים'
      });
    } finally {
      setLoading(false);
    }
  };

  // רענון נתונים
  const handleRefresh = () => {
    loadData();
  };

  // טיפול בפעולות
  const handleAction = (action, kidId) => {
    switch (action) {
      case 'start':
        navigate(`/kids/onboarding/${kidId}`);
        break;
      case 'dashboard':
        navigate(`/kids/onboarding/${kidId}`);
        break;
      case 'profile':
        navigate(`/kids/${kidId}`);
        break;
      default:
        console.log(`Action ${action} not implemented yet`);
    }
  };

  // חישוב גיל
  const calculateAge = (birthDateString) => {
    if (!birthDateString) return '–';
    const birthDate = new Date(birthDateString);
    const today = new Date();
    const years = today.getFullYear() - birthDate.getFullYear();
    const months = today.getMonth() - birthDate.getMonth();
    
    if (years > 0) {
      return `${years} שנים`;
    } else {
      return `${months >= 0 ? months : months + 12} חודשים`;
    }
  };

  // פילטור ילדים
  const filteredKids = kids.filter(kid => {
    const searchMatch = !searchTerm || 
      (kid.firstName && kid.firstName.toLowerCase().includes(searchTerm.toLowerCase())) ||
      (kid.lastName && kid.lastName.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const kidOnboardingData = onboardingData[kid.id];
    const processStatus = kidOnboardingData?.process?.processStatus || 'NotStarted';
    const statusMatch = !statusFilter || processStatus === statusFilter;
    
    return searchMatch && statusMatch;
  });

  // חישוב סטטיסטיקות מעודכן
  const stats = {
    total: kids.length,
    completed: Object.values(onboardingData).filter(d => d?.process?.processStatus === 'Completed').length,
    inProgress: Object.values(onboardingData).filter(d => d?.process?.processStatus === 'InProgress').length,
    notStarted: kids.length - Object.keys(onboardingData).filter(k => onboardingData[k]).length
  };

  return (
    <Box sx={{ p: 3 }} dir="rtl">
      {/* Breadcrumbs */}
      <Breadcrumbs sx={{ mb: 2 }}>
        <Box 
          sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
          onClick={() => navigate('/')}
        >
          <HomeIcon sx={{ mr: 0.5, fontSize: 'small' }} />
          ראשי
        </Box>
        <Typography color="text.primary" sx={{ display: 'flex', alignItems: 'center' }}>
          <GroupIcon sx={{ mr: 0.5, fontSize: 'small' }} />
          ניהול ילדים
        </Typography>
      </Breadcrumbs>
      
      {/* כותרת ופעולות */}
      <Paper sx={{ p: 3, mb: 3, borderRadius: 3 }}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
          <Box>
            <Typography variant="h4" sx={{ fontWeight: 'bold', color: 'primary.main', mb: 1 }}>
              ניהול ילדים
            </Typography>
            <Typography variant="body1" color="text.secondary">
              מעקב אחר תהליכי קליטה וניהול פרטי ילדים במערכת
            </Typography>
          </Box>
          
          <Box sx={{ display: 'flex', gap: 2 }}>
            <Tooltip title="רענון נתונים">
              <IconButton onClick={handleRefresh} disabled={loading}>
                <RefreshIcon />
              </IconButton>
            </Tooltip>
            
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => navigate('/kids/onboarding/new')}
            >
              קליטת ילד חדש
            </Button>
          </Box>
        </Box>
        
        {/* פילטרים */}
        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <TextField
            size="small"
            placeholder="חיפוש לפי שם..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
            }}
            sx={{ width: 300 }}
          />
          
          <FormControl size="small" sx={{ minWidth: 200 }}>
            <InputLabel>סטטוס תהליך</InputLabel>
            <Select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              label="סטטוס תהליך"
            >
              <MenuItem value="">הכל</MenuItem>
              <MenuItem value="NotStarted">לא התחיל</MenuItem>
              <MenuItem value="InProgress">בתהליך</MenuItem>
              <MenuItem value="Completed">הושלם</MenuItem>
            </Select>
          </FormControl>
        </Box>
      </Paper>

      {/* סטטיסטיקות */}
      <Grid container spacing={2} sx={{ mb: 3 }}>
        <Grid item xs={12} sm={3}>
          <Card sx={{ textAlign: 'center', p: 2 }}>
            <Typography variant="h3" color="primary.main" fontWeight="bold">
              {stats.total}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              סה"כ ילדים
            </Typography>
          </Card>
        </Grid>
        <Grid item xs={12} sm={3}>
          <Card sx={{ textAlign: 'center', p: 2 }}>
            <Typography variant="h3" color="success.main" fontWeight="bold">
              {stats.completed}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              הושלמו
            </Typography>
          </Card>
        </Grid>
        <Grid item xs={12} sm={3}>
          <Card sx={{ textAlign: 'center', p: 2 }}>
            <Typography variant="h3" color="warning.main" fontWeight="bold">
              {stats.inProgress}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              בתהליך
            </Typography>
          </Card>
        </Grid>
        <Grid item xs={12} sm={3}>
          <Card sx={{ textAlign: 'center', p: 2 }}>
            <Typography variant="h3" color="info.main" fontWeight="bold">
              {stats.notStarted}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              לא התחילו
            </Typography>
          </Card>
        </Grid>
      </Grid>

      {/* שגיאות */}
      {error && (
        <Alert severity="error" sx={{ mb: 2 }}>
          {error}
        </Alert>
      )}

      {/* טבלת ילדים */}
      <TableContainer component={Paper} sx={{ borderRadius: 3 }}>
        <Table>
          <TableHead>
            <TableRow sx={{ backgroundColor: 'grey.50' }}>
              <TableCell sx={{ fontWeight: 700 }}>ילד</TableCell>
              <TableCell sx={{ fontWeight: 700 }}>גיל</TableCell>
              <TableCell sx={{ fontWeight: 700 }}>מגדר</TableCell>
              <TableCell sx={{ fontWeight: 700 }}>הורה ראשי</TableCell>
              <TableCell sx={{ fontWeight: 700 }}>סטטוס קליטה</TableCell>
              <TableCell sx={{ fontWeight: 700 }}>התקדמות מפורטת</TableCell>
              <TableCell sx={{ fontWeight: 700 }}>פעולות</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {loading ? (
              <TableRow>
                <TableCell colSpan={7} align="center" sx={{ py: 4 }}>
                  <CircularProgress />
                </TableCell>
              </TableRow>
            ) : filteredKids.length === 0 ? (
              <TableRow>
                <TableCell colSpan={7} align="center" sx={{ py: 4 }}>
                  <Typography color="text.secondary">
                    לא נמצאו ילדים
                  </Typography>
                </TableCell>
              </TableRow>
            ) : (
              filteredKids.map((kid) => {
                const kidOnboardingData = onboardingData[kid.id];
                
                return (
                  <TableRow key={kid.id} hover>
                    <TableCell>
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                        <Avatar sx={{ width: 40, height: 40 }}>
                          {`${kid.firstName?.[0] || ''}${kid.lastName?.[0] || ''}`}
                        </Avatar>
                        <Typography fontWeight="medium">
                          {`${kid.firstName || ''} ${kid.lastName || ''}`}
                        </Typography>
                      </Box>
                    </TableCell>
                    <TableCell>{calculateAge(kid.birthDate)}</TableCell>
                    <TableCell>
                      <Chip 
                        label={kid.gender === 'זכר' ? 'זכר' : 'נקבה'} 
                        size="small"
                        color={kid.gender === 'זכר' ? 'primary' : 'secondary'}
                      />
                    </TableCell>
                    <TableCell>{kid.parentName1 || '–'}</TableCell>
                    <TableCell>
                      <OnboardingStatusChip onboardingData={kidOnboardingData} />
                    </TableCell>
                    <TableCell>
                      <DetailedProgress onboardingData={kidOnboardingData} />
                    </TableCell>
                    <TableCell>
                      <OnboardingActions
                        kid={kid}
                        onboardingData={kidOnboardingData}
                        onAction={handleAction}
                      />
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </TableContainer>

      {/* כפתור צף */}
      <Fab
        color="primary"
        onClick={() => navigate('/kids/onboarding/new')}
        sx={{ position: 'fixed', bottom: 24, left: 24 }}
      >
        <AddIcon />
      </Fab>
    </Box>
  );
};

export default KidsManagement;

#################################################################

// src/pages/kids/KidOnboarding.jsx - גרסה מעודכנת עם Dashboard
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import {
  Container, Box, Paper, Typography, CircularProgress, Breadcrumbs,
  Button, Alert, AlertTitle, Fade, Dialog, DialogTitle, DialogContent,
  DialogActions
} from '@mui/material';
import {
  Home as HomeIcon,
  Group as GroupIcon,
  ArrowBack as BackIcon,
  Refresh as RefreshIcon
} from '@mui/icons-material';

import { 
  fetchOnboardingStatus, 
  fetchAvailableForms, 
  clearOnboardingData,
  setCurrentProcess
} from '../../Redux/features/onboardingSlice';
import { 
  fetchKidById, 
  clearSelectedKid
} from '../../Redux/features/kidsSlice';
import PersonalInfoForm from './PersonalInfoForm';
import DynamicFormRenderer from './DynamicFormRenderer';
import OnboardingDashboard from './OnboardingDashboard';
import ProgressLogo from './ProgressLogo';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';

const KidOnboarding = () => {
  const { kidId } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  const { currentProcess, status, error } = useSelector(state => state.onboarding);
  const { selectedKid } = useSelector(state => state.kids);
  
  const [viewMode, setViewMode] = useState('dashboard'); // 'dashboard' | 'form'
  const [selectedForm, setSelectedForm] = useState(null);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);

  const isNewKid = kidId === undefined ;

  // טעינה ראשונית
  useEffect(() => {
    initializeOnboarding();
  }, [kidId]);

  const initializeOnboarding = async () => {
    try {
      setLoading(true);
      dispatch(clearOnboardingData());
      dispatch(clearSelectedKid());
      
      if (!isNewKid) {
        // טעינת נתוני ילד קיים
        await dispatch(fetchKidById(kidId));
        
        // טעינת סטטוס התהליך
        try {
          const statusResult = await dispatch(fetchOnboardingStatus(kidId)).unwrap();
          dispatch(setCurrentProcess(kidId));
          setViewMode('dashboard');
        } catch (error) {
          console.log('No onboarding process found, showing form creation');
          // אין תהליך קליטה - מציגים הודעה
        }
      } else {
        // ילד חדש - הצגת טופס פרטים אישיים
        setViewMode('personalInfo');
      }
      
    } catch (error) {
      console.error('Error initializing onboarding:', error);
    } finally {
      setLoading(false);
    }
  };

  // רענון נתונים
  const handleRefresh = async () => {
    if (isNewKid) return;
    
    setRefreshing(true);
    try {
      await dispatch(fetchOnboardingStatus(kidId)).unwrap();
      dispatch(setCurrentProcess(kidId));
    } catch (error) {
      console.error('Error refreshing data:', error);
    } finally {
      setRefreshing(false);
    }
  };

  // קליטת ילד חדש הושלמה
  const handleKidCreated = (newKid) => {
    navigate(`/kids/onboarding/${newKid.id}`, { replace: true });
    // הטעינה החדשה תתרחש ב-useEffect
  };

  // בחירת טופס לעריכה
  const handleFormSelect = (form) => {
    setSelectedForm(form);
    setViewMode('form');
  };

  // השלמת טופס
  const handleFormComplete = async (formId) => {
    setViewMode('dashboard');
    setSelectedForm(null);
    await handleRefresh(); // רענון הנתונים
  };

  // חזרה ל-Dashboard
  const handleBackToDashboard = () => {
    setViewMode('dashboard');
    setSelectedForm(null);
  };

  // שליחה להורים
  const handleSendToParent = (form) => {
    // הפעולה מתבצעת ב-OnboardingDashboard
    console.log('Form sent to parent:', form);
  };

  if (loading) {
    return (
      <Container maxWidth="md" sx={{ py: 4, textAlign: 'center' }}>
        <CircularProgress size={60} />
        <Typography variant="h6" sx={{ mt: 2 }}>
          טוען תהליך קליטה...
        </Typography>
      </Container>
    );
  }

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns}>
      <Container maxWidth="lg" sx={{ py: 4 }}>
        {/* Breadcrumbs */}
        <Breadcrumbs sx={{ mb: 3 }}>
          <Box 
            sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
            onClick={() => navigate('/')}
          >
            <HomeIcon sx={{ mr: 0.5 }} />
            ראשי
          </Box>
          <Box 
            sx={{ display: 'flex', alignItems: 'center', cursor: 'pointer' }}
            onClick={() => navigate('/kids')}
          >
            <GroupIcon sx={{ mr: 0.5 }} />
            ניהול ילדים
          </Box>
          <Typography color="text.primary">
            {isNewKid ? 'קליטת ילד חדש' : `קליטה - ${selectedKid?.firstName} ${selectedKid?.lastName}`}
          </Typography>
        </Breadcrumbs>

        {/* שגיאות */}
        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            <AlertTitle>שגיאה</AlertTitle>
            {error}
          </Alert>
        )}

        {/* הלוגו עם הפרוגרס */}
        {!isNewKid && currentProcess && (
          <ProgressLogo 
            onboardingData={currentProcess}
            kidName={selectedKid ? `${selectedKid.firstName} ${selectedKid.lastName}` : null}
            showFormsSummary={viewMode === 'dashboard'}
            compact={viewMode !== 'dashboard'}
          />
        )}

        {/* תוכן דינמי לפי מצב */}
        <Fade in={true} timeout={500}>
          <Box>
            {viewMode === 'personalInfo' && (
              <Paper sx={{ borderRadius: 3, overflow: 'hidden', mb: 3 }}>
                <Box sx={{ p: 3, backgroundColor: 'grey.50' }}>
                  <Typography variant="h5" gutterBottom>
                    פרטים אישיים
                  </Typography>
                  <Typography variant="body2" color="text.secondary">
                    מילוי פרטי הילד וההורים
                  </Typography>
                </Box>
                
                <Box sx={{ p: 3 }}>
                  <PersonalInfoForm
                    data={null}
                    onUpdate={handleKidCreated}
                    isEditMode={false}
                  />
                </Box>
              </Paper>
            )}

            {viewMode === 'dashboard' && currentProcess && (
              <>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                  <Typography variant="h4" fontWeight="bold">
                    תהליך קליטה
                  </Typography>
                  <Button
                    variant="outlined"
                    startIcon={refreshing ? <CircularProgress size={20} /> : <RefreshIcon />}
                    onClick={handleRefresh}
                    disabled={refreshing}
                  >
                    {refreshing ? 'מרענן...' : 'רענן'}
                  </Button>
                </Box>

                <OnboardingDashboard
                  kidId={kidId}
                  onboardingData={currentProcess}
                  onFormSelect={handleFormSelect}
                  onSendToParent={handleSendToParent}
                />
              </>
            )}

            {viewMode === 'form' && selectedForm && (
              <Paper sx={{ borderRadius: 3, overflow: 'hidden', mb: 3 }}>
                <Box sx={{ p: 3, backgroundColor: 'grey.50', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Box>
                    <Typography variant="h5" gutterBottom>
                      {selectedForm.form.formName}
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      {selectedForm.form.formDescription}
                    </Typography>
                  </Box>
                  <Button
                    variant="outlined"
                    startIcon={<BackIcon />}
                    onClick={handleBackToDashboard}
                  >
                    חזרה
                  </Button>
                </Box>
                
                <Box sx={{ p: 3 }}>
                  <DynamicFormRenderer
                    form={selectedForm.form}
                    kidId={kidId}
                    onFormComplete={handleFormComplete}
                    showSendToParentOption={true}
                    readOnly={selectedForm.status === 'completed' || selectedForm.status === 'completed_by_parent'}
                  />
                </Box>
              </Paper>
            )}

            {viewMode === 'dashboard' && !currentProcess && !isNewKid && (
              <Alert severity="info" sx={{ mb: 3 }}>
                <AlertTitle>לא נמצא תהליך קליטה</AlertTitle>
                לא נמצא תהליך קליטה עבור ילד זה. ייתכן שהתהליך עדיין לא התחיל.
                <Box sx={{ mt: 2 }}>
                  <Button 
                    variant="contained" 
                    onClick={() => navigate(`/kids/onboarding/new`)}
                  >
                    התחל תהליך קליטה חדש
                  </Button>
                </Box>
              </Alert>
            )}
          </Box>
        </Fade>
      </Container>
    </LocalizationProvider>
  );
};

export default KidOnboarding;

#####################################################

// src/pages/kids/OnboardingDashboard.jsx
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  Box, Paper, Typography, Grid, Card, CardContent, CardActions,
  Button, Chip, LinearProgress, IconButton, Tooltip, Divider,
  Alert, AlertTitle, Fade, Dialog, DialogTitle, DialogContent,
  DialogActions, CircularProgress
} from '@mui/material';
import {
  CheckCircle as CheckIcon,
  PlayArrow as StartIcon,
  Edit as EditIcon,
  Send as SendIcon,
  Schedule as ScheduleIcon,
  Email as EmailIcon,
  Warning as WarningIcon,
  Info as InfoIcon,
  Assignment as AssignmentIcon
} from '@mui/icons-material';
import { styled } from '@mui/material/styles';
import Swal from 'sweetalert2';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { 
  completeFormStep, 
  sendFormToParent,
  updateFormStatusLocally 
} from '../../Redux/features/onboardingSlice';

// עיצוב מותאם לכרטיס טופס
const FormCard = styled(Card)(({ theme, status }) => {
  const getCardStyles = () => {
    switch (status) {
      case 'completed':
      case 'completed_by_parent':
        return {
          borderLeft: `6px solid ${theme.palette.success.main}`,
          backgroundColor: theme.palette.success.light + '10',
        };
      case 'in_progress':
        return {
          borderLeft: `6px solid ${theme.palette.primary.main}`,
          backgroundColor: theme.palette.primary.light + '10',
        };
      case 'sent_to_parent':
        return {
          borderLeft: `6px solid ${theme.palette.info.main}`,
          backgroundColor: theme.palette.info.light + '10',
        };
      default:
        return {
          borderLeft: `6px solid ${theme.palette.grey[300]}`,
          backgroundColor: theme.palette.grey[50],
        };
    }
  };

  return {
    height: '100%',
    transition: 'all 0.3s ease',
    cursor: 'pointer',
    ...getCardStyles(),
    '&:hover': {
      transform: 'translateY(-4px)',
      boxShadow: theme.shadows[8],
    }
  };
});

const OnboardingDashboard = ({ 
  kidId, 
  onboardingData, 
  onFormSelect,
  onSendToParent,
  loading = false 
}) => {
  const dispatch = useDispatch();
  const [sendDialog, setSendDialog] = useState({ open: false, form: null });
  const { completingForm, sendingToParent } = useSelector(state => state.onboarding);

  if (!onboardingData) {
    return (
      <Alert severity="info" sx={{ mb: 3 }}>
        <AlertTitle>אין נתוני קליטה</AlertTitle>
        לא נמצא תהליך קליטה עבור ילד זה
      </Alert>
    );
  }

  // פונקציות עזר
  const getStatusConfig = (form) => {
    switch (form.status) {
      case 'completed':
        return {
          icon: <CheckIcon />,
          label: 'הושלם',
          color: 'success',
          variant: 'filled'
        };
      case 'completed_by_parent':
        return {
          icon: <CheckIcon />,
          label: 'הושלם ע"י הורים',
          color: 'success',
          variant: 'filled'
        };
      case 'in_progress':
        return {
          icon: <EditIcon />,
          label: 'בתהליך',
          color: 'primary',
          variant: 'filled'
        };
      case 'sent_to_parent':
        return {
          icon: <EmailIcon />,
          label: 'נשלח להורים',
          color: 'info',
          variant: 'filled'
        };
      default:
        return {
          icon: <ScheduleIcon />,
          label: 'לא התחיל',
          color: 'default',
          variant: 'outlined'
        };
    }
  };

  const getProgressPercentage = (form) => {
    if (form.totalQuestions === 0) return 0;
    return Math.round((form.answeredQuestions / form.totalQuestions) * 100);
  };

  const canEditForm = (form) => {
    return ['not_started', 'in_progress'].includes(form.status);
  };

  const canSendToParent = (form) => {
    return form.status === 'in_progress' && form.answeredQuestions > 0;
  };

  const isCompleted = (form) => {
    return ['completed', 'completed_by_parent'].includes(form.status);
  };

  // טיפול בפעולות
  const handleFormClick = (form) => {
    // כל הטפסים ניתנים לעריכה - כולל הטופס הראשון
    if (onFormSelect) {
      onFormSelect(form);
    }
  };

  const handleSendToParent = (form) => {
    setSendDialog({ open: true, form });
  };

  const confirmSendToParent = async () => {
    const { form } = sendDialog;
    setSendDialog({ open: false, form: null });

    try {
      await dispatch(sendFormToParent({ 
        kidId, 
        formId: form.form.formId 
      })).unwrap();

      Swal.fire({
        icon: 'success',
        title: 'נשלח בהצלחה!',
        text: `הטופס "${form.form.formName}" נשלח להורים למילוי`,
        timer: 3000,
        showConfirmButton: false
      });

      if (onSendToParent) {
        onSendToParent(form);
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'שגיאה בשליחה',
        text: error.message || 'אירעה שגיאה בשליחת הטופס להורים'
      });
    }
  };

  if (loading) {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <CircularProgress size={60} />
        <Typography variant="h6" sx={{ mt: 2 }}>
          טוען נתוני קליטה...
        </Typography>
      </Box>
    );
  }

  return (
    <Box dir="rtl">
      {/* כותרת עם סטטיסטיקות */}
      <Paper sx={{ p: 3, mb: 4, borderRadius: 3 }}>
        <Typography variant="h5" gutterBottom sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          <AssignmentIcon color="primary" />
          טפסי קליטה
        </Typography>
        
        <Grid container spacing={2} sx={{ mt: 1 }}>
          <Grid item xs={12} sm={3}>
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="primary.main" fontWeight="bold">
                {onboardingData.completionPercentage}%
              </Typography>
              <Typography variant="body2" color="text.secondary">
                התקדמות כללית
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="success.main" fontWeight="bold">
                {onboardingData.completedForms}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                טפסים הושלמו
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="warning.main" fontWeight="bold">
                {onboardingData.forms.filter(f => f.status === 'in_progress').length}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                בתהליך
              </Typography>
            </Box>
          </Grid>
          <Grid item xs={12} sm={3}>
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h3" color="info.main" fontWeight="bold">
                {onboardingData.forms.filter(f => f.status === 'sent_to_parent').length}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                נשלחו להורים
              </Typography>
            </Box>
          </Grid>
        </Grid>

        <Box sx={{ mt: 3 }}>
          <LinearProgress 
            variant="determinate" 
            value={onboardingData.completionPercentage} 
            sx={{ height: 12, borderRadius: 6 }}
          />
        </Box>
      </Paper>

      {/* רשת כרטיסי הטפסים */}
      <Grid container spacing={3}>
        {onboardingData.forms.map((form, index) => {
          const statusConfig = getStatusConfig(form);
          const progressPercentage = getProgressPercentage(form);

          return (
            <Grid item xs={12} md={6} lg={4} key={form.form.formId}>
              <Fade in={true} timeout={300 + (index * 100)}>
                <FormCard 
                  status={form.status}
                  onClick={() => handleFormClick(form)}
                >
                  <CardContent sx={{ pb: 1 }}>
                    {/* כותרת הטופס */}
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                      <Typography variant="h6" component="div" sx={{ fontWeight: 'bold', flex: 1 }}>
                        {form.form.formName}
                      </Typography>
                      <Chip
                        icon={statusConfig.icon}
                        label={statusConfig.label}
                        color={statusConfig.color}
                        variant={statusConfig.variant}
                        size="small"
                      />
                    </Box>

                    {/* תיאור הטופס */}
                    <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                      {form.form.formDescription}
                    </Typography>

                    {/* התקדמות */}
                    {!form.form.isFirstStep && form.totalQuestions > 0 && (
                      <Box sx={{ mb: 2 }}>
                        <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 1 }}>
                          <Typography variant="body2" color="text.secondary">
                            התקדמות:
                          </Typography>
                          <Typography variant="body2" fontWeight="bold">
                            {form.answeredQuestions}/{form.totalQuestions} שאלות
                          </Typography>
                        </Box>
                        <LinearProgress 
                          variant="determinate" 
                          value={progressPercentage}
                          sx={{ height: 6, borderRadius: 3 }}
                        />
                      </Box>
                    )}

                    {/* מידע נוסף */}
                    {form.completedAt && (
                      <Typography variant="caption" color="success.main" sx={{ display: 'block', mt: 1 }}>
                        הושלם ב: {new Date(form.completedAt).toLocaleDateString('he-IL')}
                      </Typography>
                    )}
                    
                    {form.sentToParentAt && (
                      <Typography variant="caption" color="info.main" sx={{ display: 'block', mt: 1 }}>
                        נשלח להורים ב: {new Date(form.sentToParentAt).toLocaleDateString('he-IL')}
                      </Typography>
                    )}
                  </CardContent>

                  {/* פעולות */}
                  <CardActions sx={{ pt: 0, px: 2, pb: 2 }}>
                    <Box sx={{ display: 'flex', gap: 1, width: '100%' }}>
                      {/* כל הטפסים ניתנים לעריכה */}
                      {!isCompleted(form) && (
                        <Button
                          size="small"
                          variant="contained"
                          startIcon={form.status === 'not_started' ? <StartIcon /> : <EditIcon />}
                          onClick={(e) => {
                            e.stopPropagation();
                            handleFormClick(form);
                          }}
                          sx={{ flex: 1 }}
                        >
                          {form.status === 'not_started' ? 'התחל' : 'המשך'}
                        </Button>
                      )}

                      {/* שליחה להורים - רק לטפסים שאינם הראשון */}
                      {!form.form.isFirstStep && canSendToParent(form) && (
                        <Tooltip title="שלח טופס להורים למילוי">
                          <IconButton
                            size="small"
                            color="secondary"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleSendToParent(form);
                            }}
                            disabled={sendingToParent}
                          >
                            <SendIcon />
                          </IconButton>
                        </Tooltip>
                      )}

                      {/* צפייה/עריכה - תמיד זמין */}
                      <Button
                        size="small"
                        variant={isCompleted(form) ? "outlined" : "contained"}
                        startIcon={isCompleted(form) ? <VisibilityIcon /> : <EditIcon />}
                        onClick={(e) => {
                          e.stopPropagation();
                          handleFormClick(form);
                        }}
                        sx={{ flex: 1 }}
                      >
                        {isCompleted(form) ? 'צפה/ערוך' : 'ערוך'}
                      </Button>
                    </Box>
                  </CardActions>
                </FormCard>
              </Fade>
            </Grid>
          );
        })}
      </Grid>

      {/* דיאלוג אישור שליחה להורים */}
      <Dialog
        open={sendDialog.open}
        onClose={() => setSendDialog({ open: false, form: null })}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>שליחת טופס להורים</DialogTitle>
        <DialogContent>
          <Typography>
            האם ברצונך לשלוח את הטופס "{sendDialog.form?.form?.formName}" להורים למילוי?
          </Typography>
          <Alert severity="info" sx={{ mt: 2 }}>
            הטופס יישלח להורים באימייל/SMS עם קישור למילוי
          </Alert>
        </DialogContent>
        <DialogActions>
          <Button 
            onClick={() => setSendDialog({ open: false, form: null })}
            disabled={sendingToParent}
          >
            ביטול
          </Button>
          <Button 
            onClick={confirmSendToParent}
            variant="contained"
            disabled={sendingToParent}
            startIcon={sendingToParent ? <CircularProgress size={20} /> : <SendIcon />}
          >
            {sendingToParent ? 'שולח...' : 'שלח'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default OnboardingDashboard;

###########################################################

// components/kids/ProgressLogo.jsx - גרסה מעודכנת עם Dashboard
import { Box, Typography, Paper, Grid, Chip } from '@mui/material';
import { styled } from '@mui/material/styles';
import {
  CheckCircle as CheckIcon,
  Schedule as ScheduleIcon,
  Edit as EditIcon,
  Email as EmailIcon
} from '@mui/icons-material';

const IntegratedContainer = styled(Box)(({ theme }) => ({
  position: 'relative',
  width: '100%',
  marginBottom: theme.spacing(3),
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
}));

// אזור הלוגו עם המצב השלם (כולל הלוגו המתמלא)
const LogoArea = styled(Box)(({ theme }) => ({
  position: 'relative',
  width: '150px',
  height: '134px',
  marginBottom: '-10px', // שלילי כדי לגרום ללוגו לחפוף עם הטופס
  zIndex: 2, // מעל הטופס
}));

// מעטפת ה-SVG
const LogoWrapper = styled(Box)(({ theme }) => ({
  position: 'relative',
  width: '100%',
  height: '100%',
  overflow: 'visible',
}));

// SVG המלא (רקע אפור)
const LogoOutline = styled('svg')(({ theme }) => ({
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  zIndex: 1,
}));

// SVG המתמלא (צבעוני)
const LogoFill = styled('svg')(({ progress, theme }) => ({
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%',
  zIndex: 2,
  clipPath: `inset(${100 - progress}% 0 0 0)`, // חיתוך מלמעלה כלפי מטה
  transition: 'clip-path 0.8s ease-in-out',
}));

// אחוז ההתקדמות
const ProgressText = styled(Typography)(({ theme }) => ({
  position: 'absolute',
  top: '50%',
  left: '50%',
  transform: 'translate(-50%, -50%)',
  fontWeight: 'bold',
  fontSize: '1.2rem',
  color: '#fff',
  zIndex: 3,
  backgroundColor: 'rgba(0,0,0,0.4)',
  padding: '4px 8px',
  borderRadius: '20px',
  textShadow: '0 1px 2px rgba(0,0,0,0.5)',
}));

// שם הילד (אם יש)
const KidName = styled(Typography)(({ theme }) => ({
  position: 'absolute',
  bottom: '-5px',
  left: '50%',
  transform: 'translateX(-50%)',
  fontWeight: 'bold',
  fontSize: '0.95rem',
  backgroundColor: theme.palette.primary.main,
  color: '#fff',
  padding: '2px 12px',
  borderRadius: '12px',
  zIndex: 4,
  boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
  maxWidth: '90%',
  whiteSpace: 'nowrap',
  overflow: 'hidden',
  textOverflow: 'ellipsis',
}));

// סיכום טפסים מתחת ללוגו
const FormsSummary = styled(Paper)(({ theme }) => ({
  padding: theme.spacing(2, 3, 3, 3),
  borderRadius: theme.spacing(2, 2, 2, 2),
  backgroundColor: theme.palette.grey[50],
  boxShadow: '0 -4px 20px rgba(0,0,0,0.05)',
  width: '100%',
  maxWidth: '800px',
  zIndex: 1
}));

const ProgressLogo = ({ 
  onboardingData = null,
  kidName = null, 
  showFormsSummary = true,
  compact = false
}) => {
  // חישוב האחוז שהושלם
  const progress = onboardingData?.completionPercentage || 0;
  
  const logoPath = "M338.307,72..."; // יש להכניס את הנתיב המלא של הלוגו כאן
  // פונקציה לקבלת סטטוס אייקון
  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
      case 'completed_by_parent':
        return <CheckIcon color="success" fontSize="small" />;
      case 'in_progress':
        return <EditIcon color="primary" fontSize="small" />;
      case 'sent_to_parent':
        return <EmailIcon color="info" fontSize="small" />;
      default:
        return <ScheduleIcon color="disabled" fontSize="small" />;
    }
  };

  // פונקציה לקבלת צבע סטטוס
  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
      case 'completed_by_parent':
        return 'success';
      case 'in_progress':
        return 'primary';
      case 'sent_to_parent':
        return 'info';
      default:
        return 'default';
    }
  };

  return (
    <IntegratedContainer>
      <LogoArea>
        <LogoWrapper>
          {/* הלוגו האפור (רקע) */}
          <LogoOutline
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 824.009 734.597"
          >
            <path 
              d={logoPath}
              transform="translate(1.003 1.007)" 
              fill="#f5f5f5"
              stroke="#e0e0e0"
              strokeWidth="2"
            />
          </LogoOutline>
          
          {/* הלוגו הצבעוני (מתמלא) */}
          <LogoFill
            xmlns="http://www.w3.org/2000/svg" 
            viewBox="0 0 824.009 734.597"
            progress={progress}
          >
            <defs>
              <linearGradient id="logoGradient" x1="100%" y1="100%" x2="100%" y2="0%">
                 <stop offset="0%" stopColor="#3F5AA7" />
                 <stop offset="25%" stopColor="#3E5BA1" />
                 <stop offset="50%" stopColor="#71C8DD" />
                 <stop offset="75%" stopColor="#8BCCC6" />
                 <stop offset="100%" stopColor="#73BFB5" />
               </linearGradient>
               <filter id="logoGlow" x="-20%" y="-20%" width="140%" height="140%">
                 <feGaussianBlur stdDeviation="5" result="blur" />
                 <feComposite in="SourceGraphic" in2="blur" operator="over" />
               </filter>
             </defs>
             <path 
               d={logoPath}
               transform="translate(1.003 1.007)" 
               fill="url(#logoGradient)"
               stroke="#4A8897"
               strokeWidth="2"
               filter="url(#logoGlow)"
            />
          </LogoFill>
          
          {/* הצגת אחוז ההתקדמות */}
          <ProgressText>{progress}%</ProgressText>
          
          {/* שם הילד אם יש */}
          {kidName && <KidName>{kidName}</KidName>}
        </LogoWrapper>
      </LogoArea>
      
      {/* סיכום טפסים */}
      {showFormsSummary && onboardingData && (
        <FormsSummary elevation={3}>
          {compact ? (
            // תצוגה מצומצמת
            <Box sx={{ textAlign: 'center' }}>
              <Typography variant="h6" gutterBottom>
                התקדמות קליטה
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {onboardingData.completedForms} מתוך {onboardingData.totalForms} טפסים הושלמו
              </Typography>
            </Box>
          ) : (
            // תצוגה מלאה
            <>
              <Typography variant="h6" gutterBottom sx={{ textAlign: 'center', mb: 3 }}>
                סטטוס טפסי הקליטה
              </Typography>
              
              <Grid container spacing={2}>
                {onboardingData.forms?.map((form, index) => (
                  <Grid item xs={12} sm={6} md={4} key={form.form.formId}>
                    <Box 
                      sx={{ 
                        display: 'flex', 
                        alignItems: 'center', 
                        gap: 1,
                        p: 1.5,
                        borderRadius: 2,
                        backgroundColor: 'white',
                        border: '1px solid',
                        borderColor: 'grey.200',
                        transition: 'all 0.2s ease',
                        '&:hover': {
                          borderColor: 'primary.main',
                          transform: 'translateY(-1px)'
                        }
                      }}
                    >
                      {getStatusIcon(form.status)}
                      <Box sx={{ flex: 1, minWidth: 0 }}>
                        <Typography 
                          variant="body2" 
                          fontWeight="medium"
                          sx={{ 
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            whiteSpace: 'nowrap'
                          }}
                        >
                          {form.form.formName}
                        </Typography>
                        {form.status === 'in_progress' && form.totalQuestions > 0 && (
                          <Typography variant="caption" color="text.secondary">
                            {form.answeredQuestions}/{form.totalQuestions} שאלות
                          </Typography>
                        )}
                      </Box>
                      <Chip
                        size="small"
                        label={
                          form.status === 'completed' ? 'הושלם' :
                          form.status === 'completed_by_parent' ? 'הושלם ע"י הורים' :
                          form.status === 'in_progress' ? 'בתהליך' :
                          form.status === 'sent_to_parent' ? 'נשלח להורים' :
                          'לא התחיל'
                        }
                        color={getStatusColor(form.status)}
                        variant={
                          ['completed', 'completed_by_parent', 'in_progress', 'sent_to_parent'].includes(form.status) 
                            ? 'filled' 
                            : 'outlined'
                        }
                      />
                    </Box>
                  </Grid>
                ))}
              </Grid>
            </>
          )}
        </FormsSummary>
      )}
    </IntegratedContainer>
  );
};

export default ProgressLogo;

##################################################

// src/pages/kids/DynamicFormRenderer.jsx - גרסה משופרת
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  Box, Paper, Typography, Alert, AlertTitle, CircularProgress,
  Button, Grid, Divider, Chip, Fade, LinearProgress, Snackbar
} from '@mui/material';
import {
  Save as SaveIcon,
  Send as SendIcon,
  CheckCircle as CheckIcon,
  Autorenew as AutoSaveIcon,    // 🔁 Good for autosave
  Warning as WarningIcon
} from '@mui/icons-material';
import { useFormik } from 'formik';
import * as yup from 'yup';
import Swal from 'sweetalert2';

import { fetchQuestionsByFormId } from '../../Redux/features/questionsSlice';
import { 
  fetchFormAnswers, 
  saveFormAnswers, 
  updateLocalAnswer,
  setCurrentForm 
} from '../../Redux/features/answersSlice';
import QuestionRenderer from './QuestionRenderer';

const DynamicFormRenderer = ({ 
  form, 
  kidId, 
  onFormComplete, 
  showSendToParentOption = true,
  readOnly = false 
}) => {
  const dispatch = useDispatch();
  const [validationSchema, setValidationSchema] = useState(yup.object({}));
  const [progress, setProgress] = useState(0);
  const [autoSaveStatus, setAutoSaveStatus] = useState('idle'); // idle, saving, saved, error
  const [lastSaved, setLastSaved] = useState(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  const { 
    currentFormQuestions, 
    status: questionsStatus, 
    error: questionsError 
  } = useSelector(state => state.questions);
  
  const { 
    currentFormAnswers, 
    saveStatus, 
    error: answersError 
  } = useSelector(state => state.answers);

  // טעינת שאלות ותשובות בעת טעינת הקומפוננטה
  useEffect(() => {
    if (form?.formId && kidId) {
      loadFormData();
    }
  }, [form?.formId, kidId]);

  // עדכון progress כאשר התשובות משתנות
  useEffect(() => {
    if (currentFormQuestions.length > 0) {
      calculateProgress();
    }
  }, [currentFormAnswers, currentFormQuestions]);

  // שמירה אוטומטית כל 30 שניות אם יש שינויים
  useEffect(() => {
    if (!readOnly && hasUnsavedChanges) {
      const autoSaveInterval = setInterval(() => {
        handleAutoSave();
      }, 30000); // 30 שניות

      return () => clearInterval(autoSaveInterval);
    }
  }, [hasUnsavedChanges, readOnly]);

  const loadFormData = async () => {
    try {
      // טעינת שאלות הטופס
      await dispatch(fetchQuestionsByFormId(form.formId));
      
      // הגדרת הטופס הנוכחי
      dispatch(setCurrentForm({ kidId, formId: form.formId }));
      
      // טעינת תשובות קיימות
      await dispatch(fetchFormAnswers({ kidId, formId: form.formId }));
    } catch (error) {
      console.error('Error loading form data:', error);
    }
  };

  // יצירת סכימת validation דינמית
  useEffect(() => {
    if (currentFormQuestions.length > 0) {
      const schema = {};
      
      currentFormQuestions.forEach(question => {
        let fieldSchema = yup.string();
        
        if (question.isMandatory) {
          fieldSchema = fieldSchema.required(`${question.questionText} הוא שדה חובה`);
        }
        
        // תקינות נוספת לפי סוג השאלה
        if (question.questionType === 'email') {
          fieldSchema = fieldSchema.email('כתובת דוא״ל לא תקינה');
        } else if (question.questionType === 'number') {
          fieldSchema = yup.number().typeError('יש להזין מספר תקין');
          if (question.isMandatory) {
            fieldSchema = fieldSchema.required(`${question.questionText} הוא שדה חובה`);
          }
        } else if (question.questionType === 'date') {
          fieldSchema = yup.date().typeError('תאריך לא תקין');
          if (question.isMandatory) {
            fieldSchema = fieldSchema.required(`${question.questionText} הוא שדה חובה`);
          }
        }
        
        schema[`question_${question.questionNo}`] = fieldSchema;
        
        // תמיכה בשדה "אחר"
        if (question.hasOther) {
          schema[`question_${question.questionNo}_other`] = yup.string();
        }
      });
      
      setValidationSchema(yup.object(schema));
    }
  }, [currentFormQuestions]);

  // חישוב אחוז ההתקדמות
  const calculateProgress = () => {
    if (currentFormQuestions.length === 0) return;
    
    const mandatoryQuestions = currentFormQuestions.filter(q => q.isMandatory);
    const answeredMandatory = mandatoryQuestions.filter(q => 
      currentFormAnswers.some(a => a.questionNo === q.questionNo && a.answer)
    );
    
    const totalAnswered = currentFormAnswers.filter(a => a.answer).length;
    const progressPercent = Math.round((totalAnswered / currentFormQuestions.length) * 100);
    const mandatoryProgress = mandatoryQuestions.length > 0 ? 
      Math.round((answeredMandatory.length / mandatoryQuestions.length) * 100) : 100;
    
    setProgress(progressPercent);
    
    // בדיקה אם כל השאלות החובה נענו
    return mandatoryProgress === 100;
  };

  // הכנת ערכים ראשוניים לטופס
  const getInitialValues = () => {
    const values = {};
    
    currentFormQuestions.forEach(question => {
      const existingAnswer = currentFormAnswers.find(a => a.questionNo === question.questionNo);
      values[`question_${question.questionNo}`] = existingAnswer?.answer || '';
      
      if (question.hasOther) {
        values[`question_${question.questionNo}_other`] = existingAnswer?.other || '';
      }
    });
    
    return values;
  };

  const formik = useFormik({
    initialValues: getInitialValues(),
    validationSchema: validationSchema,
    enableReinitialize: true,
    onSubmit: async (values) => {
      await handleFormSubmit(values, false);
    },
  });

  // עדכון ערכי הטופס כאשר התשובות משתנות
  useEffect(() => {
    if (currentFormAnswers.length > 0) {
      const newValues = getInitialValues();
      formik.setValues(newValues);
    }
  }, [currentFormAnswers]);

  // שמירה אוטומטית
  const handleAutoSave = async () => {
    if (!hasUnsavedChanges || readOnly) return;
    
    setAutoSaveStatus('saving');
    try {
      const answers = prepareAnswersForSaving(formik.values);
      if (answers.length > 0) {
        await dispatch(saveFormAnswers({
          kidId,
          formId: form.formId,
          answers
        })).unwrap();
        
        setAutoSaveStatus('saved');
        setHasUnsavedChanges(false);
        setLastSaved(new Date());
        
        setTimeout(() => setAutoSaveStatus('idle'), 2000);
      }
    } catch (error) {
      setAutoSaveStatus('error');
      setTimeout(() => setAutoSaveStatus('idle'), 3000);
    }
  };

  // הכנת התשובות לשמירה
  const prepareAnswersForSaving = (values) => {
    const answers = [];
    
    currentFormQuestions.forEach(question => {
      const answer = values[`question_${question.questionNo}`];
      const other = values[`question_${question.questionNo}_other`];
      
      if (answer) {
        answers.push({
          questionNo: question.questionNo,
          answer: answer,
          other: other || null,
          byParent: false
        });
      }
    });
    
    return answers;
  };

  const handleFormSubmit = async (values, sendToParent = false) => {
    try {
      const answers = prepareAnswersForSaving(values);

      if (answers.length === 0) {
        Swal.fire({
          icon: 'warning',
          title: 'לא נמצאו תשובות',
          text: 'יש למלא לפחות שאלה אחת לפני השמירה',
        });
        return;
      }

      // שמירת התשובות
      await dispatch(saveFormAnswers({
        kidId,
        formId: form.formId,
        answers: answers.map(a => ({ ...a, byParent: sendToParent }))
      })).unwrap();

      setHasUnsavedChanges(false);

      if (sendToParent) {
        Swal.fire({
          icon: 'success',
          title: 'נשלח בהצלחה!',
          text: 'הטופס נשלח להורים למילוי',
          timer: 2000,
          showConfirmButton: false
        });
      } else {
        // בדיקה אם כל השאלות החובה נענו
        const allMandatoryAnswered = calculateProgress();
        
        if (allMandatoryAnswered) {
          const result = await Swal.fire({
            icon: 'success',
            title: 'נשמר בהצלחה!',
            text: 'כל השאלות החובה נענו. האם תרצה לסמן את הטופס כמושלם?',
            showCancelButton: true,
            confirmButtonText: 'כן, סמן כמושלם',
            cancelButtonText: 'לא, המשך עריכה'
          });
          
          if (result.isConfirmed && onFormComplete) {
            onFormComplete(form.formId);
          }
        } else {
          Swal.fire({
            icon: 'info',
            title: 'נשמר בהצלחה!',
            text: 'התשובות נשמרו. עדיין יש שאלות חובה שלא נענו.',
            timer: 2000,
            showConfirmButton: false
          });
        }
      }
    } catch (error) {
      Swal.fire({
        icon: 'error',
        title: 'שגיאה בשמירה',
        text: error.message || 'אירעה שגיאה בשמירת הטופס',
      });
    }
  };

  const handleSendToParent = () => {
    Swal.fire({
      title: 'שליחת טופס להורים',
      text: 'האם ברצונך לשלוח את הטופס להורים למילוי?',
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: 'כן, שלח',
      cancelButtonText: 'ביטול',
      confirmButtonColor: '#2196f3'
    }).then((result) => {
      if (result.isConfirmed) {
        handleFormSubmit(formik.values, true);
      }
    });
  };

  // עדכון תשובה מקומית בזמן הקלדה
  const handleQuestionChange = (questionNo, value, otherValue = null) => {
    // עדכון הRedux
    dispatch(updateLocalAnswer({
      questionNo,
      answer: value,
      other: otherValue
    }));
    
    // עדכון הFormik
    formik.setFieldValue(`question_${questionNo}`, value);
    if (otherValue !== null) {
      formik.setFieldValue(`question_${questionNo}_other`, otherValue);
    }
    
    // סימון שיש שינויים לא שמורים
    setHasUnsavedChanges(true);
  };

  if (questionsStatus === 'loading') {
    return (
      <Box sx={{ textAlign: 'center', py: 4 }}>
        <CircularProgress size={60} />
        <Typography variant="h6" sx={{ mt: 2 }}>
          טוען שאלות הטופס...
        </Typography>
      </Box>
    );
  }

  if (questionsError) {
    return (
      <Alert severity="error" sx={{ mb: 3 }}>
        <AlertTitle>שגיאה בטעינת הטופס</AlertTitle>
        {questionsError}
      </Alert>
    );
  }

  if (currentFormQuestions.length === 0) {
    return (
      <Alert severity="warning" sx={{ mb: 3 }}>
        <AlertTitle>אין שאלות</AlertTitle>
        לא נמצאו שאלות עבור טופס זה
      </Alert>
    );
  }

  return (
    <Box dir="rtl">
      {/* סרגל התקדמות מעודכן */}
      <Paper sx={{ p: 2, mb: 3, borderRadius: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
          <Typography variant="body2" color="text.secondary" sx={{ minWidth: 120 }}>
            התקדמות הטופס:
          </Typography>
          <Box sx={{ flexGrow: 1, mx: 2 }}>
            <LinearProgress 
              variant="determinate" 
              value={progress} 
              sx={{ height: 8, borderRadius: 4 }}
            />
          </Box>
          <Typography variant="body2" color="primary" fontWeight="bold">
            {progress}%
          </Typography>
        </Box>
        
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Typography variant="caption" color="text.secondary">
            {currentFormAnswers.length} מתוך {currentFormQuestions.length} שאלות נענו
          </Typography>
          
          {/* סטטוס שמירה אוטומטית */}
          {!readOnly && (
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              {autoSaveStatus === 'saving' && (
                <>
                  <CircularProgress size={16} />
                  <Typography variant="caption" color="text.secondary">
                    שומר...
                  </Typography>
                </>
              )}
              {autoSaveStatus === 'saved' && (
                <>
                  <CheckIcon fontSize="small" color="success" />
                  <Typography variant="caption" color="success.main">
                    נשמר אוטומטית
                  </Typography>
                </>
              )}
              {autoSaveStatus === 'error' && (
                <>
                  <WarningIcon fontSize="small" color="error" />
                  <Typography variant="caption" color="error.main">
                    שגיאה בשמירה
                  </Typography>
                </>
              )}
              {hasUnsavedChanges && autoSaveStatus === 'idle' && (
                <Typography variant="caption" color="warning.main">
                  יש שינויים לא שמורים
                </Typography>
              )}
              {lastSaved && (
                <Typography variant="caption" color="text.secondary">
                  נשמר לאחרונה: {lastSaved.toLocaleTimeString('he-IL')}
                </Typography>
              )}
            </Box>
          )}
        </Box>
      </Paper>

      {/* שגיאות */}
      {answersError && (
        <Alert severity="error" sx={{ mb: 3 }}>
          <AlertTitle>שגיאה</AlertTitle>
          {answersError}
        </Alert>
      )}

      <form onSubmit={formik.handleSubmit}>
        {/* רנדור שאלות לפי קטגוריות */}
        {Object.entries(groupQuestionsByCategory()).map(([category, questions], categoryIndex) => (
          <Fade in={true} timeout={300 + (categoryIndex * 200)} key={category}>
            <Paper 
              sx={{ 
                mb: 4, 
                borderRadius: 3,
                overflow: 'hidden',
                border: '1px solid',
                borderColor: 'grey.200'
              }}
            >
              {/* כותרת קטגוריה */}
              <Box 
                sx={{ 
                  p: 2, 
                  backgroundColor: 'primary.main', 
                  color: 'white',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'space-between'
                }}
              >
                <Typography variant="h6" fontWeight="bold">
                  {category}
                </Typography>
                <Chip 
                  label={`${questions.length} שאלות`}
                  size="small"
                  sx={{ 
                    backgroundColor: 'rgba(255,255,255,0.2)', 
                    color: 'white',
                    fontWeight: 'bold'
                  }}
                />
              </Box>
              
              {/* שאלות הקטגוריה */}
              <Box sx={{ p: 3 }}>
                <Grid container spacing={3}>
                  {questions
                    .sort((a, b) => a.questionNo - b.questionNo)
                    .map((question, index) => (
                      <Grid item xs={12} key={question.questionNo}>
                        <QuestionRenderer
                          question={question}
                          value={formik.values[`question_${question.questionNo}`] || ''}
                          otherValue={formik.values[`question_${question.questionNo}_other`] || ''}
                          error={formik.touched[`question_${question.questionNo}`] && 
                                 formik.errors[`question_${question.questionNo}`]}
                          onChange={(value, otherValue) => 
                            handleQuestionChange(question.questionNo, value, otherValue)
                          }
                          onBlur={() => formik.setFieldTouched(`question_${question.questionNo}`, true)}
                          readOnly={readOnly}
                        />
                      </Grid>
                    ))}
                </Grid>
              </Box>
            </Paper>
          </Fade>
        ))}

        {!readOnly && (
          <>
            <Divider sx={{ my: 4 }} />
            
            {/* כפתורי פעולה מעודכנים */}
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between',
              alignItems: 'center',
              flexWrap: 'wrap',
              gap: 2 
            }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Chip 
                  icon={<CheckIcon />}
                  label={`${currentFormAnswers.length} תשובות נשמרו`}
                  color="success"
                  variant="outlined"
                  size="small"
                />
                
                {hasUnsavedChanges && (
                  <Chip 
                    icon={<AutoSaveIcon />}
                    label="יש שינויים לא שמורים"
                    color="warning"
                    variant="outlined"
                    size="small"
                  />
                )}
              </Box>

              <Box sx={{ display: 'flex', gap: 2 }}>
                {/* כפתור שמירה אוטומטית ידנית */}
                <Button
                  variant="outlined"
                  startIcon={<AutoSaveIcon />}
                  onClick={handleAutoSave}
                  disabled={!hasUnsavedChanges || autoSaveStatus === 'saving'}
                >
                  שמור עכשיו
                </Button>
                
                {showSendToParentOption && (
                  <Button
                    variant="outlined"
                    color="secondary"
                    startIcon={<SendIcon />}
                    onClick={handleSendToParent}
                    disabled={saveStatus === 'loading'}
                  >
                    שלח להורים
                  </Button>
                )}
                
                <Button
                  type="submit"
                  variant="contained"
                  startIcon={saveStatus === 'loading' ? <CircularProgress size={20} /> : <SaveIcon />}
                  disabled={saveStatus === 'loading'}
                  sx={{ minWidth: 140 }}
                >
                  {saveStatus === 'loading' ? 'שומר...' : 'שמור והמשך'}
                </Button>
              </Box>
            </Box>
          </>
        )}
      </form>

      {/* הודעת שמירה אוטומטית */}
      <Snackbar
        open={autoSaveStatus === 'saved'}
        autoHideDuration={2000}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        message="נשמר אוטומטית"
      />
    </Box>
  );
  
  // פונקציה לקיבוץ שאלות לפי קטגוריה
  function groupQuestionsByCategory() {
    const grouped = {};
    currentFormQuestions.forEach(question => {
      const category = question.category || 'כללי';
      if (!grouped[category]) {
        grouped[category] = [];
      }
      grouped[category].push(question);
    });
    return grouped;
  }
};

export default DynamicFormRenderer;

##################################################

// src/pages/kids/QuestionRenderer.jsx
import React, { useState } from 'react';
import {
  TextField, FormControl, FormLabel, RadioGroup, FormControlLabel,
  Radio, Checkbox, FormGroup, Select, MenuItem, InputLabel,
  FormHelperText, Typography, Box, Paper, Chip, Switch,
  InputAdornment, IconButton, Tooltip
} from '@mui/material';
import {
  Info as InfoIcon,
  CalendarToday as CalendarIcon,
  Email as EmailIcon,
  Phone as PhoneIcon,
  Numbers as NumberIcon
} from '@mui/icons-material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { styled } from '@mui/material/styles';

// עיצוב מותאם לשאלה - פשוט יותר
const QuestionContainer = styled(Box)(({ theme, required }) => ({
  marginBottom: theme.spacing(3),
  padding: theme.spacing(2),
  borderRadius: theme.spacing(1),
  border: required ? `1px solid ${theme.palette.warning.light}` : `1px solid ${theme.palette.grey[300]}`,
  backgroundColor: theme.palette.background.paper,
  transition: 'all 0.2s ease',
  '&:focus-within': {
    borderColor: theme.palette.primary.main,
    boxShadow: `0 0 0 1px ${theme.palette.primary.main}25`,
  }
}));

const QuestionText = styled(Typography)(({ theme, required }) => ({
  fontWeight: 500,
  color: theme.palette.text.primary,
  marginBottom: theme.spacing(1.5),
  fontSize: '1rem',
  display: 'flex',
  alignItems: 'center',
  gap: theme.spacing(1)
}));

const RequiredIndicator = () => (
  <Typography component="span" sx={{ color: 'error.main', fontWeight: 'bold' }}>
    *
  </Typography>
);

const QuestionRenderer = ({
  question,
  value,
  otherValue,
  error,
  onChange,
  onBlur,
  readOnly = false
}) => {
  const [showOther, setShowOther] = useState(false);

  // פיצול הערכים האפשריים (מופרדים בפסיקים)
  const possibleValues = question.possibleValues ? 
    question.possibleValues.split(',').map(val => val.trim()) : [];

  // טיפול בשינוי ערך
  const handleValueChange = (newValue, newOtherValue = null) => {
    onChange(newValue, newOtherValue);
    
    // הצגת שדה "אחר" אם נבחרה האפשרות "אחר"
    if (question.hasOther && (newValue === 'אחר' || newValue?.includes?.('אחר'))) {
      setShowOther(true);
    } else {
      setShowOther(false);
    }
  };

  // רנדור לפי סוג השאלה
  const renderQuestionInput = () => {
    switch (question.questionType) {
      case 'text':
      case 'textArea':
        return (
          <TextField
            fullWidth
            multiline={question.questionType === 'textArea'}
            rows={question.questionType === 'textArea' ? 4 : 1}
            value={value}
            onChange={(e) => handleValueChange(e.target.value)}
            onBlur={onBlur}
            error={!!error}
            helperText={error}
            placeholder={`הזן ${question.questionText}`}
            disabled={readOnly}
            InputProps={{
              startAdornment: question.questionType === 'textArea' ? null : (
                <InputAdornment position="start">
                  <InfoIcon color="action" fontSize="small" />
                </InputAdornment>
              )
            }}
          />
        );

      case 'email':
        return (
          <TextField
            fullWidth
            type="email"
            value={value}
            onChange={(e) => handleValueChange(e.target.value)}
            onBlur={onBlur}
            error={!!error}
            helperText={error}
            placeholder="example@mail.com"
            disabled={readOnly}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <EmailIcon color="primary" fontSize="small" />
                </InputAdornment>
              )
            }}
          />
        );

      case 'phone':
        return (
          <TextField
            fullWidth
            type="tel"
            value={value}
            onChange={(e) => handleValueChange(e.target.value)}
            onBlur={onBlur}
            error={!!error}
            helperText={error}
            placeholder="05X-XXXXXXX"
            disabled={readOnly}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <PhoneIcon color="primary" fontSize="small" />
                </InputAdornment>
              )
            }}
          />
        );

      case 'number':
        return (
          <TextField
            fullWidth
            type="number"
            value={value}
            onChange={(e) => handleValueChange(e.target.value)}
            onBlur={onBlur}
            error={!!error}
            helperText={error}
            placeholder="הזן מספר"
            disabled={readOnly}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <NumberIcon color="primary" fontSize="small" />
                </InputAdornment>
              )
            }}
          />
        );

      case 'date':
        return (
          <DatePicker
            value={value ? new Date(value) : null}
            onChange={(newDate) => handleValueChange(newDate?.toISOString())}
            disabled={readOnly}
            slots={{
              textField: TextField
            }}
            slotProps={{
              textField: {
                fullWidth: true,
                error: !!error,
                helperText: error,
                InputProps: {
                  startAdornment: (
                    <InputAdornment position="start">
                      <CalendarIcon color="primary" fontSize="small" />
                    </InputAdornment>
                  )
                }
              }
            }}
          />
        );

      case 'boolean':
      case 'yesNo':
        return (
          <FormControl component="fieldset" error={!!error}>
            <RadioGroup
              row
              value={value}
              onChange={(e) => handleValueChange(e.target.value)}
            >
              <FormControlLabel
                value="כן"
                control={<Radio disabled={readOnly} />}
                label="כן"
              />
              <FormControlLabel
                value="לא"
                control={<Radio disabled={readOnly} />}
                label="לא"
              />
            </RadioGroup>
            {error && <FormHelperText>{error}</FormHelperText>}
          </FormControl>
        );

      case 'radio':
      case 'singleChoice':
        return (
          <FormControl component="fieldset" error={!!error} fullWidth>
            <RadioGroup
              value={value}
              onChange={(e) => handleValueChange(e.target.value)}
            >
              {possibleValues.map((option, index) => (
                <FormControlLabel
                  key={index}
                  value={option}
                  control={<Radio disabled={readOnly} />}
                  label={option}
                />
              ))}
              {question.hasOther && (
                <FormControlLabel
                  value="אחר"
                  control={<Radio disabled={readOnly} />}
                  label="אחר"
                />
              )}
            </RadioGroup>
            {error && <FormHelperText>{error}</FormHelperText>}
          </FormControl>
        );

      case 'checkbox':
      case 'multiChoice':
        const selectedValues = value ? value.split(',').map(v => v.trim()) : [];
        
        const handleCheckboxChange = (optionValue, checked) => {
          let newValues = [...selectedValues];
          
          if (checked) {
            if (!newValues.includes(optionValue)) {
              newValues.push(optionValue);
            }
          } else {
            newValues = newValues.filter(v => v !== optionValue);
          }
          
          // בדיקת מגבלת כמות הערכים
          if (question.howManyValues && newValues.length > question.howManyValues) {
            newValues = newValues.slice(0, question.howManyValues);
          }
          
          handleValueChange(newValues.join(', '));
        };

        return (
          <FormControl component="fieldset" error={!!error} fullWidth>
            <FormGroup>
              {possibleValues.map((option, index) => (
                <FormControlLabel
                  key={index}
                  control={
                    <Checkbox
                      checked={selectedValues.includes(option)}
                      onChange={(e) => handleCheckboxChange(option, e.target.checked)}
                      disabled={readOnly}
                    />
                  }
                  label={option}
                />
              ))}
              {question.hasOther && (
                <FormControlLabel
                  control={
                    <Checkbox
                      checked={selectedValues.includes('אחר')}
                      onChange={(e) => handleCheckboxChange('אחר', e.target.checked)}
                      disabled={readOnly}
                    />
                  }
                  label="אחר"
                />
              )}
            </FormGroup>
            {question.howManyValues && (
              <FormHelperText>
                ניתן לבחור עד {question.howManyValues} אפשרויות
              </FormHelperText>
            )}
            {error && <FormHelperText>{error}</FormHelperText>}
          </FormControl>
        );

      case 'select':
      case 'dropdown':
        return (
          <FormControl fullWidth error={!!error}>
            <InputLabel>בחר אפשרות</InputLabel>
            <Select
              value={value}
              onChange={(e) => handleValueChange(e.target.value)}
              onBlur={onBlur}
              label="בחר אפשרות"
              disabled={readOnly}
            >
              <MenuItem value="">
                <em>בחר אפשרות</em>
              </MenuItem>
              {possibleValues.map((option, index) => (
                <MenuItem key={index} value={option}>
                  {option}
                </MenuItem>
              ))}
              {question.hasOther && (
                <MenuItem value="אחר">אחר</MenuItem>
              )}
            </Select>
            {error && <FormHelperText>{error}</FormHelperText>}
          </FormControl>
        );

      case 'switch':
        return (
          <FormControlLabel
            control={
              <Switch
                checked={value === 'true' || value === true}
                onChange={(e) => handleValueChange(e.target.checked.toString())}
                disabled={readOnly}
              />
            }
            label={value === 'true' || value === true ? 'כן' : 'לא'}
          />
        );

      default:
        return (
          <TextField
            fullWidth
            value={value}
            onChange={(e) => handleValueChange(e.target.value)}
            onBlur={onBlur}
            error={!!error}
            helperText={error}
            placeholder={`הזן ${question.questionText}`}
            disabled={readOnly}
          />
        );
    }
  };

  return (
    <QuestionContainer required={question.isMandatory}>
      <QuestionText required={question.isMandatory}>
        {question.questionText}
        {question.isMandatory && <RequiredIndicator />}
      </QuestionText>

      {renderQuestionInput()}

      {/* שדה "אחר" */}
      {question.hasOther && (showOther || (value === 'אחר' || value?.includes?.('אחר'))) && (
        <Box sx={{ mt: 2 }}>
          <TextField
            fullWidth
            label="פרט:"
            value={otherValue || ''}
            onChange={(e) => onChange(value, e.target.value)}
            disabled={readOnly}
            placeholder="הזן פירוט נוסף..."
            size="small"
          />
        </Box>
      )}
    </QuestionContainer>
  );
};

export default QuestionRenderer;

###########################################

// src/pages/kids/PersonalInfoForm.jsx - עיצוב מטורף + תיקונים טכניים
import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
  Grid, Typography, TextField, MenuItem, FormControl,
  InputLabel, Select, Button, Box, Avatar, FormHelperText, 
  Alert, AlertTitle, InputAdornment, Tooltip, CircularProgress,
  Paper, Divider, Chip, RadioGroup, FormControlLabel, Radio,
  FormLabel, Fade, Zoom, Card, CardContent, Badge, 
  IconButton, Stack, Switch, Collapse, useTheme
} from '@mui/material';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { styled } from '@mui/material/styles';
import {
  Edit as EditIcon,
  Save as SaveIcon,
  Cancel as CancelIcon,
  DeleteOutline as DeleteIcon,
  CloudUpload as UploadIcon,
  Info as InfoIcon,
  ContactPhone as CallIcon,
  Email as EmailIcon,
  Home as HomeIcon,
  Work as WorkIcon,
  Person as PersonIcon,
  PersonAdd as PersonAddIcon,
  Cake as CakeIcon,
  Wc as GenderIcon,
  MedicalServices as MedicalIcon,
  LocationCity as CityIcon,
  LocalHospital as HospitalIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Event as EventIcon,
  Face as FaceIcon,
  NavigateNext as NextIcon,
  LocalPhone as PhoneIcon,
  School as SchoolIcon,
  AddToPhotos as FileIcon,
} from '@mui/icons-material';
import MaleIcon from '@mui/icons-material/Male';
import FemaleIcon from '@mui/icons-material/Female'
import BadgeIcon from '@mui/icons-material/Badge';
import Swal from 'sweetalert2';
import { useFormik } from 'formik';
import * as yup from 'yup';
import { fetchCities } from '../../Redux/features/citiesSlice';
import { fetchClasses } from '../../Redux/features/classesSlice';
import { fetchHealthInsurances } from '../../Redux/features/healthinsurancesSlice';
import { fetchParentById } from '../../Redux/features/parentSlice';
import { createKidWithParents, updateKidWithParents, fetchKids } from '../../Redux/features/kidsSlice';

// עיצוב משופר לאווטאר עם אפקט הבלטה וזוהר
const EnhancedAvatar = styled(Avatar)(({ theme }) => ({
  width: 150,
  height: 150,
  border: `4px solid ${theme.palette.background.paper}`,
  boxShadow: `0 6px 20px rgba(0,0,0,0.2), 0 0 15px ${theme.palette.primary.light}`,
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  '&:hover': {
    transform: 'scale(1.05)',
    boxShadow: `0 8px 25px rgba(0,0,0,0.3), 0 0 20px ${theme.palette.primary.main}`,
  }
}));

// מיכל תמונת פרופיל עם אפקט מבריק
const ProfileImageContainer = styled(Box)(({ theme }) => ({
  position: 'relative',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
  marginBottom: theme.spacing(2),
  '&::after': {
    content: '""',
    position: 'absolute',
    top: '10%',
    left: '10%',
    right: '10%',
    height: '1px',
    background: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.8), transparent)',
    filter: 'blur(1px)',
    opacity: 0.7,
    animation: 'shimmer 2s infinite',
  },
  '@keyframes shimmer': {
    '0%': { transform: 'translateX(-100%)' },
    '100%': { transform: 'translateX(100%)' },
  }
}));

// כרטיסיה מוגדלת עם הנפשה לפתיחה
const AnimatedSection = styled(Card)(({ theme, expanded }) => ({
  marginBottom: theme.spacing(4),
  borderRadius: theme.spacing(2),
  boxShadow: expanded
    ? `0 8px 32px rgba(0,0,0,0.15), 0 0 0 2px ${theme.palette.primary.main}38`
    : '0 4px 12px rgba(0,0,0,0.05)',
  transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
  transform: expanded ? 'translateY(0)' : 'translateY(0)',
  overflow: 'hidden',
  '&:hover': {
    boxShadow: `0 8px 28px rgba(0,0,0,0.12), 0 0 0 2px ${theme.palette.primary.main}15`,
  },
}));

// כותרת סקשן מקצועית
const SectionHeader = styled(Box)(({ theme }) => ({
  padding: theme.spacing(2, 3),
  background: 'linear-gradient(90deg, rgba(33,150,243,0.05) 0%, rgba(33,150,243,0.1) 100%)',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'space-between',
  borderBottom: `1px solid ${theme.palette.divider}`,
  cursor: 'pointer',
  '&:hover': {
    background: 'linear-gradient(90deg, rgba(33,150,243,0.1) 0%, rgba(33,150,243,0.15) 100%)',
  },
}));

// כותרת כרטיסיה
const SectionTitle = styled(Typography)(({ theme, expanded }) => ({
  display: 'flex',
  alignItems: 'center',
  fontWeight: 600,
  color: expanded ? theme.palette.primary.main : theme.palette.text.primary,
  transition: 'color 0.3s ease',
}));

// אייקון סקשן מונפש
const SectionIcon = styled(Box)(({ theme, expanded }) => ({
  marginLeft: theme.spacing(2),
  marginRight: theme.spacing(2),
  color: expanded ? theme.palette.primary.main : theme.palette.primary.main,
  background: expanded ? 'rgba(33,150,243,0.1)' : 'transparent',
  borderRadius: '50%',
  padding: theme.spacing(1),
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  transition: 'all 0.3s ease',
}));

// כפתור מונפש
const AnimatedButton = styled(Button)(({ theme }) => ({
  position: 'relative',
  overflow: 'hidden',
  transition: 'all 0.3s ease',
  '&::after': {
    content: '""',
    position: 'absolute',
    top: 0,
    left: '-100%',
    width: '100%',
    height: '100%',
    background: 'linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent)',
    transition: 'all 0.5s ease',
  },
  '&:hover::after': {
    left: '100%',
  },
}));

// כפתור העלאת תמונה מעוצב
const UploadButton = styled(Button)(({ theme }) => ({
  marginTop: theme.spacing(2),
  borderRadius: '20px',
  padding: theme.spacing(1, 3),
  boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
  background: 'linear-gradient(90deg, #2196f3, #64b5f6)',
  transition: 'all 0.3s ease',
  color: 'white',
  '&:hover': {
    background: 'linear-gradient(90deg, #1976d2, #2196f3)',
    boxShadow: '0 6px 15px rgba(0,0,0,0.2)',
  }
}));

// תיבת כפתורי פעולה
const ActionButtonsContainer = styled(Box)(({ theme }) => ({
  display: 'flex',
  justifyContent: 'space-between',
  marginTop: theme.spacing(4),
  padding: theme.spacing(2),
  borderTop: `1px solid ${theme.palette.divider}`,
  background: 'linear-gradient(to bottom, transparent, rgba(0,0,0,0.02))',
}));

// סכימת ולידציה משופרת
const validationSchema = yup.object({
  // פרטי הילד
  firstName: yup.string().required('שם פרטי הוא שדה חובה'),
  lastName: yup.string().required('שם משפחה הוא שדה חובה'),
  birthDate: yup.date().required('תאריך לידה הוא שדה חובה')
    .max(new Date(), 'תאריך לידה לא יכול להיות בעתיד')
    .test('age', 'הגיל חייב להיות בין 0-3 שנים', 
      (value) => {
        if (!value) return true;
        const today = new Date();
        const threeYearsAgo = new Date();
        threeYearsAgo.setFullYear(today.getFullYear() - 3);
        return value >= threeYearsAgo;
      }),
  gender: yup.string().required('מין הוא שדה חובה'),
  cityName: yup.string().required('עיר היא שדה חובה'),
  address: yup.string().required('כתובת היא שדה חובה'),
  hName: yup.string().required('קופת חולים היא שדה חובה'),
  idNumber: yup.string()
    .required('תעודת זהות היא שדה חובה')
    .matches(/^\d{9}$/, 'תעודת זהות צריכה להכיל 9 ספרות'),
  
  // פרטי הורה ראשי
  parent1FirstName: yup.string().required('שם הורה ראשי הוא שדה חובה'),
  parent1LastName: yup.string().required('שם משפחה הורה ראשי הוא שדה חובה'),
  parent1Mobile: yup.string()
    .required('טלפון נייד הורה ראשי הוא שדה חובה')
    .matches(/^05\d{8}$/, 'מספר טלפון לא תקין'),
  parent1Email: yup.string().email('כתובת דוא״ל לא תקינה').required('דוא״ל הורה ראשי חובה'),

  // פרטי הורה משני (לא חובה)
  parent2Mobile: yup.string()
    .nullable()
    .test('valid-phone', 'מספר טלפון לא תקין', (value) => {
      return !value || /^05\d{8}$/.test(value);
    }),
  parent2Email: yup.string().nullable().email('כתובת דוא״ל לא תקינה'),
});

const PersonalInfoForm = ({ data, onUpdate, isEditMode = false }) => {
  const dispatch = useDispatch();
  const theme = useTheme();
  const [photoFile, setPhotoFile] = useState(null);
  const [photoPreview, setPhotoPreview] = useState(data?.photoPath || null);
  
  // מצבי התרחבות הסקשנים
  const [expandedSections, setExpandedSections] = useState({
    childDetails: true,
    primaryParent: false,
    secondaryParent: false, 
  });
  
  const toggleSection = (section) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section]
    }));
  };
  
  // שליפת נתוני רפרנס מהסטור
  const { cities, status: citiesStatus } = useSelector(state => state.cities);
  const { kids, status: kidStatus, error: kidError } = useSelector(state => state.kids);
  const { classes, status: classesStatus } = useSelector(state => state.classes || { classes: [], status: 'idle' });
  const { healthInsurances, status: healthInsurancesStatus } = useSelector(state => state.healthInsurances);
  const isLoading = kidStatus === 'loading';
  
  // הגדרת initialValues מתקנת להורים
  const getInitialValues = () => {
    if (data && isEditMode) {
      return {
        // פרטי הילד
        id: data.id || 0,
        idNumber: data.id || 0,
        firstName: data.firstName || '',
        lastName: data.lastName || '',
        birthDate: data.birthDate ? new Date(data.birthDate) : null,
        gender: data.gender || '',
        cityName: data.cityName || '',
        address: data.address || '',
        hName: data.hName || '',
        photo: data.photo || '',
        classId: data.classId || '',
        pathToFolder: data.pathToFolder || '',
        isActive: data.isActive !== undefined ? data.isActive : true,
        
        // פרטי הורה ראשי - עכשיו עם הנתונים הנכונים
        parent1Id: data.parentId1 || 0,
        parent1FirstName: data.parent1FirstName || '',
        parent1LastName: data.parent1LastName || '',
        parent1Mobile: data.parent1Mobile || '',
        parent1Email: data.parent1Email || '',
        parent1Address: data.parent1Address || data.address || '',
        parent1CityName: data.parent1CityName || data.cityName || '',
        
        // פרטי הורה משני
        parent2Id: data.parentId2 || 0,
        parent2FirstName: data.parent2FirstName || '',
        parent2LastName: data.parent2LastName || '',
        parent2Mobile: data.parent2Mobile || '',
        parent2Email: data.parent2Email || '',
        parent2Address: data.parent2Address || '',
        parent2CityName: data.parent2CityName || '',
        
        // פרטי קשר נוספים
        homePhone: data.homePhone || '',
      };
    }
    
    // ערכים ריקים עבור ילד חדש
    return {
      id: 0,
      idNumber: '',
      firstName: '',
      lastName: '',
      birthDate: null,
      gender: '',
      cityName: '',
      address: '',
      hName: '',
      photo: '',
      classId: '',
      pathToFolder: '',
      isActive: true,
      parent1Id: 0,
      parent1FirstName: '',
      parent1LastName: '',
      parent1Mobile: '',
      parent1Email: '',
      parent1Address: '',
      parent1CityName: '',
      parent2Id: 0,
      parent2FirstName: '',
      parent2LastName: '',
      parent2Mobile: '',
      parent2Email: '',
      parent2Address: '',
      parent2CityName: '',
      homePhone: '',
    };
  };

  // טעינת נתוני רפרנס + נתוני הורים במצב עריכה
  useEffect(() => {
    dispatch(fetchCities());
    dispatch(fetchClasses());
    dispatch(fetchHealthInsurances());
    dispatch(fetchKids());
    
    // טעינת נתוני הורים במצב עריכה
    if (isEditMode && data) {
      loadParentsData();
    }
  }, [dispatch, data, isEditMode]);

  // טעינת נתוני הורים
  const loadParentsData = async () => {
    try {
      if (data.parentId1) {
        const parent1Result = await dispatch(fetchParentById(data.parentId1)).unwrap();
        // עדכון הטופס עם נתוני הורה ראשי
        formik.setValues(prev => ({
          ...prev,
          parent1FirstName: parent1Result.firstName || '',
          parent1LastName: parent1Result.lastName || '',
          parent1Mobile: parent1Result.mobilePhone || '',
          parent1Email: parent1Result.email || '',
          parent1Address: parent1Result.address || '',
          parent1CityName: parent1Result.cityName || '',
        }));
      }
      
      if (data.parentId2) {
        const parent2Result = await dispatch(fetchParentById(data.parentId2)).unwrap();
        // עדכון הטופס עם נתוני הורה משני
        formik.setValues(prev => ({
          ...prev,
          parent2FirstName: parent2Result.firstName || '',
          parent2LastName: parent2Result.lastName || '',
          parent2Mobile: parent2Result.mobilePhone || '',
          parent2Email: parent2Result.email || '',
          parent2Address: parent2Result.address || '',
          parent2CityName: parent2Result.cityName || '',
        }));
      }
    } catch (error) {
      console.error('Error loading parents data:', error);
    }
  };

  useEffect(() => {
    if (data && isEditMode) {
      formik.resetForm({ values: getInitialValues() });
    }
  }, [data, isEditMode]);

  // טיפול בהעלאת תמונה
  const handlePhotoChange = (event) => {
    if (event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      setPhotoFile(file);
      
      const reader = new FileReader();
      reader.onload = (e) => {
        setPhotoPreview(e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };
  
  // מימוש ה-Formik
  const formik = useFormik({
    initialValues: getInitialValues(),
    validationSchema: validationSchema,
    enableReinitialize: true,
    onSubmit: async (values) => {
      try {
        // בדיקה אם ילד כבר קיים במערכת (רק במצב יצירה חדשה)
        if (!isEditMode) {
          const existingKid = kids.find(kid => kid.id === Number(values.idNumber));
          if (existingKid) {
            Swal.fire({
              icon: 'warning',
              title: 'הילד קיים במערכת',
              text: 'במידה וברצונך לעדכן את פרטי הילד, תיגש לרשימת ילדים',
              confirmButtonText: 'אוקי'
            });
            return;
          }
        }

        // הכנת הנתונים לשמירה בפורמט שה-slice מצפה לו
        const formDataForSlice = {
          // נתוני ילד
          id: values.id,
          idNumber: values.idNumber || values.id,
          firstName: values.firstName,
          lastName: values.lastName,
          birthDate: values.birthDate,
          gender: values.gender,
          cityName: values.cityName,
          address: values.address,
          hName: values.hName,
          photo: values.photo,
          classId: values.classId || null,
          pathToFolder: values.pathToFolder,
          isActive: values.isActive,
          
          // נתוני הורה ראשי
          parent1Id: values.parent1Id,
          parent1FirstName: values.parent1FirstName,
          parent1LastName: values.parent1LastName,
          parent1Mobile: values.parent1Mobile,
          parent1Email: values.parent1Email,
          parent1Address: values.parent1Address,
          parent1CityName: values.parent1CityName,
          
          // נתוני הורה משני
          parent2Id: values.parent2Id,
          parent2FirstName: values.parent2FirstName,
          parent2LastName: values.parent2LastName,
          parent2Mobile: values.parent2Mobile,
          parent2Email: values.parent2Email,
          parent2Address: values.parent2Address,
          parent2CityName: values.parent2CityName,
          
          // נתוני קשר נוספים
          homePhone: values.homePhone,
        };

        let result;
        
        if (isEditMode) {
          result = await dispatch(updateKidWithParents(formDataForSlice)).unwrap();
          
          Swal.fire({
            icon: 'success',
            title: 'עודכן בהצלחה!',
            text: `פרטי הילד ${result.kid.firstName} ${result.kid.lastName} עודכנו בהצלחה`,
            timer: 2000,
            showConfirmButton: false
          });
        } else {
          result = await dispatch(createKidWithParents(formDataForSlice)).unwrap();
          
          Swal.fire({
            icon: 'success',
            title: 'נשמר בהצלחה!',
            text: `פרטי הילד ${result.kid.firstName} ${result.kid.lastName} נשמרו בהצלחה`,
            timer: 2000,
            showConfirmButton: false
          });
        }
        
        // עדכון ה-parent component
        onUpdate(result.kid);
        
      } catch (error) {
        console.error('שגיאה בשמירת נתוני הילד וההורים:', error);
        Swal.fire({
          icon: 'error',
          title: 'שגיאה בשמירת הנתונים',
          text: error.message || 'אירעה שגיאה בלתי צפויה, אנא נסה שנית',
        });
      }
    },
  });
  
  const isFormFilled = formik.dirty && Object.values(formik.values).some(val => val !== '');

  return (
    <form dir="rtl" onSubmit={formik.handleSubmit}>
      {/* הודעת שגיאה אם יש */}
      {kidError && (
        <Zoom in={true}>
          <Alert
            severity="error"
            sx={{
              mb: 3,
              borderRadius: 2,
              boxShadow: "0 4px 15px rgba(211, 47, 47, 0.2)",
            }}
            variant="filled"
            icon={<ErrorIcon />}
          >
            <AlertTitle>שגיאה</AlertTitle>
            {kidError}
          </Alert>
        </Zoom>
      )}

      {/* תמונת פרופיל */}
      <ProfileImageContainer>
        <Badge
          overlap="circular"
          anchorOrigin={{ vertical: "top", horizontal: "right" }}
          badgeContent={
            <Tooltip title="העלאת תמונה">
              <label htmlFor="kid-photo-upload">
                <IconButton
                  aria-label="העלאת תמונה"
                  component="span"
                  sx={{
                    bgcolor: "primary.main",
                    color: "white",
                    "&:hover": { bgcolor: "primary.dark" },
                  }}
                  size="small"
                >
                  <UploadIcon fontSize="small" />
                </IconButton>
              </label>
            </Tooltip>
          }
        >
          <EnhancedAvatar src={photoPreview}>
            {!photoPreview && <FaceIcon sx={{ fontSize: 80, opacity: 0.7 }} />}
          </EnhancedAvatar>
        </Badge>

        <input
          accept="image/*"
          style={{ display: "none" }}
          id="kid-photo-upload"
          type="file"
          onChange={handlePhotoChange}
        />

        <Fade in={true} timeout={800}>
          <UploadButton
            variant="contained"
            component="label"
            htmlFor="kid-photo-upload"
            startIcon={<UploadIcon />}
            size="small"
          >
            {photoPreview ? "החלף תמונה" : "העלאת תמונה"}
          </UploadButton>
        </Fade>
      </ProfileImageContainer>

      {/* קטע 1: פרטי הילד */}
      <AnimatedSection expanded={expandedSections.childDetails}>
        <SectionHeader onClick={() => toggleSection("childDetails")}>
          <SectionIcon expanded={expandedSections.childDetails}>
            <PersonIcon />
          </SectionIcon>
          <SectionTitle variant="h6" expanded={expandedSections.childDetails}>
            פרטי הילד
            <Chip
              label="פרטים בסיסיים"
              size="small"
              color={expandedSections.childDetails ? "primary" : "default"}
              sx={{ ml: 1, fontSize: "0.75rem" }}
            />
          </SectionTitle>
          <Box sx={{ ml: "auto" }}>
            <IconButton
              size="small"
              color={expandedSections.childDetails ? "primary" : "default"}
              sx={{
                transform: expandedSections.childDetails
                  ? "rotate(-90deg)"
                  : "rotate(0deg)",
                transition: "transform 0.3s ease",
              }}
            >
              <NextIcon />
            </IconButton>
          </Box>
        </SectionHeader>

        <Collapse in={expandedSections.childDetails}>
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="firstName"
                  name="firstName"
                  label="שם פרטי"
                  placeholder="שם פרטי של הילד"
                  value={formik.values.firstName}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.firstName && Boolean(formik.errors.firstName)
                  }
                  helperText={
                    formik.touched.firstName && formik.errors.firstName
                  }
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="primary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="lastName"
                  name="lastName"
                  label="שם משפחה"
                  placeholder="שם משפחה של הילד"
                  value={formik.values.lastName}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.lastName && Boolean(formik.errors.lastName)
                  }
                  helperText={formik.touched.lastName && formik.errors.lastName}
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="primary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="idNumber"
                  name="idNumber"
                  label="תעודת זהות"
                  placeholder="מספר תעודת זהות של הילד"
                  value={formik.values.idNumber}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={formik.touched.idNumber && Boolean(formik.errors.idNumber)}
                  helperText={formik.touched.idNumber && formik.errors.idNumber}
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <BadgeIcon color="primary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <DatePicker
                  label="תאריך לידה"
                  value={formik.values.birthDate}
                  onChange={(date) => formik.setFieldValue("birthDate", date)}
                  slots={{
                    textField: TextField
                  }}
                  slotProps={{
                    textField: {
                      fullWidth: true,
                      required: true,
                      error: formik.touched.birthDate && Boolean(formik.errors.birthDate),
                      helperText: formik.touched.birthDate && formik.errors.birthDate,
                      InputProps: {
                        startAdornment: (
                          <InputAdornment position="start">
                            <CakeIcon color="primary" fontSize="small" />
                          </InputAdornment>
                        ),
                      }
                    }
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl
                  fullWidth
                  required
                  error={formik.touched.gender && Boolean(formik.errors.gender)}
                >
                  <Typography
                    variant="body2"
                    color="text.secondary"
                    sx={{ mb: 1 }}
                  >
                    מין
                  </Typography>
                  <RadioGroup
                    row
                    aria-labelledby="gender-radio-group-label"
                    name="gender"
                    value={formik.values.gender}
                    onChange={formik.handleChange}
                  >
                    <FormControlLabel
                      value="זכר"
                      control={
                        <Radio
                          icon={<MaleIcon color="action" />}
                          checkedIcon={<MaleIcon color="primary" />}
                        />
                      }
                      label="זכר"
                    />
                    <FormControlLabel
                      value="נקבה"
                      control={
                        <Radio
                          icon={<FemaleIcon color="action" />}
                          checkedIcon={<FemaleIcon color="primary" />}
                        />
                      }
                      label="נקבה"
                    />
                  </RadioGroup>
                  {formik.touched.gender && formik.errors.gender && (
                    <FormHelperText>{formik.errors.gender}</FormHelperText>
                  )}
                </FormControl>
              </Grid>
              <Grid item xs={12} sm={6}>
                <FormControl
                  fullWidth
                  error={
                    formik.touched.cityName && Boolean(formik.errors.cityName)
                  }
                  required
                >
                  <InputLabel id="cityName-label">עיר</InputLabel>
                  <Select
                    labelId="cityName-label"
                    id="cityName"
                    name="cityName"
                    value={formik.values.cityName}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    label="עיר"
                    startAdornment={
                      <InputAdornment position="start">
                        <CityIcon color="primary" fontSize="small" />
                      </InputAdornment>
                    }
                  >
                    {citiesStatus === "loading" ? (
                      <MenuItem value="">
                        <CircularProgress size={20} />
                        טוען ערים...
                      </MenuItem>
                    ) : (
                      
                      cities.map((city) => (
                        <MenuItem key={city.id || city.name} value={city.cityName}>
                          {city.cityName}
                        </MenuItem>
                      ))
                    )}
                  </Select>
                  {formik.touched.cityName && formik.errors.cityName && (
                    <FormHelperText>{formik.errors.cityName}</FormHelperText>
                  )}
                </FormControl>
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="address"
                  name="address"
                  label="כתובת"
                  placeholder="רחוב, מספר בית, שכונה"
                  value={formik.values.address}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.address && Boolean(formik.errors.address)
                  }
                  helperText={formik.touched.address && formik.errors.address}
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <HomeIcon color="primary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl
                  fullWidth
                  error={formik.touched.hName && Boolean(formik.errors.hName)}
                  required
                >
                  <InputLabel id="hName-label">קופת חולים</InputLabel>
                  <Select
                    labelId="hName-label"
                    id="hName"
                    name="hName"
                    value={formik.values.hName}
                    onChange={formik.handleChange}
                    onBlur={formik.handleBlur}
                    label="קופת חולים"
                    startAdornment={
                      <InputAdornment position="start">
                        <HospitalIcon color="primary" fontSize="small" />
                      </InputAdornment>
                    }
                  >
                    {healthInsurances.map((insurance) => (
                      <MenuItem key={insurance.hName} value={insurance.hName}>
                        {insurance.hName}
                      </MenuItem>
                    ))}
                  </Select>
                  {formik.touched.hName && formik.errors.hName && (
                    <FormHelperText>{formik.errors.hName}</FormHelperText>
                  )}
                </FormControl>
              </Grid>



              {/* שדה לבחירת כיתה אם קיים מידע הכיתות */}
              {classes && classes.length > 0 && (
                <Grid item xs={12} sm={6}>
                  <FormControl fullWidth>
                    <InputLabel id="classId-label">כיתה</InputLabel>
                    <Select
                      labelId="classId-label"
                      id="classId"
                      name="classId"
                      value={formik.values.classId}
                      onChange={formik.handleChange}
                      label="כיתה"
                      startAdornment={
                        <InputAdornment position="start">
                          <SchoolIcon color="primary" fontSize="small" />
                        </InputAdornment>
                      }
                    >
                      {classes.map((classItem) => (
                        <MenuItem key={classItem.classId} value={classItem.classId}>
                          {classItem.className}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
              )}

              {/* מתג סטטוס פעיל */}
              <Grid item xs={12}>
                <FormControlLabel
                  control={
                    <Switch
                      id="isActive"
                      name="isActive"
                      checked={formik.values.isActive}
                      onChange={formik.handleChange}
                      color="success"
                    />
                  }
                  label={
                    <Typography
                      variant="body2"
                      color={
                        formik.values.isActive
                          ? "success.main"
                          : "text.secondary"
                      }
                    >
                      {formik.values.isActive
                        ? "פעיל במערכת"
                        : "לא פעיל במערכת"}
                    </Typography>
                  }
                />
              </Grid>
            </Grid>
          </CardContent>
        </Collapse>
      </AnimatedSection>

      {/* קטע 2: פרטי הורה ראשי */}
      <AnimatedSection expanded={expandedSections.primaryParent}>
        <SectionHeader onClick={() => toggleSection("primaryParent")}>
          <SectionIcon expanded={expandedSections.primaryParent}>
            <PersonIcon />
          </SectionIcon>
          <SectionTitle variant="h6" expanded={expandedSections.primaryParent}>
            פרטי הורה ראשי
            <Chip
              label="פרטים בסיסיים"
              size="small"
              color={expandedSections.primaryParent ? "primary" : "default"}
              sx={{ ml: 1, fontSize: "0.75rem" }}
            />
          </SectionTitle>
          <Box sx={{ ml: "auto" }}>
            <IconButton
              size="small"
              color={expandedSections.primaryParent ? "primary" : "default"}
              sx={{
                transform: expandedSections.primaryParent
                  ? "rotate(-90deg)"
                  : "rotate(0deg)",
                transition: "transform 0.3s ease",
              }}
            >
              <NextIcon />
            </IconButton>
          </Box>
        </SectionHeader>

        <Collapse in={expandedSections.primaryParent}>
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent1FirstName"
                  name="parent1FirstName"
                  label="שם פרטי"
                  placeholder="שם פרטי ההורה"
                  value={formik.values.parent1FirstName}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.parent1FirstName &&
                    Boolean(formik.errors.parent1FirstName)
                  }
                  helperText={
                    formik.touched.parent1FirstName &&
                    formik.errors.parent1FirstName
                  }
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="secondary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent1LastName"
                  name="parent1LastName"
                  label="שם משפחה"
                  placeholder="שם משפחה ההורה"
                  value={formik.values.parent1LastName}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.parent1LastName &&
                    Boolean(formik.errors.parent1LastName)
                  }
                  helperText={
                    formik.touched.parent1LastName &&
                    formik.errors.parent1LastName
                  }
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="secondary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent1Mobile"
                  name="parent1Mobile"
                  label="טלפון נייד"
                  placeholder="05X-XXXXXXX"
                  value={formik.values.parent1Mobile}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.parent1Mobile &&
                    Boolean(formik.errors.parent1Mobile)
                  }
                  helperText={
                    formik.touched.parent1Mobile && formik.errors.parent1Mobile
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <CallIcon color="secondary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  required
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent1Email"
                  name="parent1Email"
                  label="דוא״ל"
                  type="email"
                  placeholder="example@mail.com"
                  value={formik.values.parent1Email}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.parent1Email &&
                    Boolean(formik.errors.parent1Email)
                  }
                  helperText={
                    formik.touched.parent1Email && formik.errors.parent1Email
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <EmailIcon color="secondary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent1Address"
                  name="parent1Address"
                  label="כתובת (אם שונה מכתובת הילד)"
                  placeholder="רחוב, מספר בית, שכונה"
                  value={formik.values.parent1Address}
                  onChange={formik.handleChange}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <HomeIcon color="secondary" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel id="parent1CityName-label">עיר הורה</InputLabel>
                  <Select
                    labelId="parent1CityName-label"
                    id="parent1CityName"
                    name="parent1CityName"
                    value={formik.values.parent1CityName}
                    onChange={formik.handleChange}
                    label="עיר הורה"
                    startAdornment={
                      <InputAdornment position="start">
                        <CityIcon color="secondary" fontSize="small" />
                      </InputAdornment>
                    }
                  >
                    <MenuItem value="">
                      <em>זהה לעיר הילד</em>
                    </MenuItem>
                    {citiesStatus === "loading" ? (
                      <MenuItem value="" disabled>
                        <CircularProgress size={20} />
                        טוען ערים...
                      </MenuItem>
                    ) : (
                      cities.map((city) => (
                        <MenuItem key={city.id || city.name} value={city.name}>
                          {city.name}
                        </MenuItem>
                      ))
                    )}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </CardContent>
        </Collapse>
      </AnimatedSection>

      {/* חלק 3: פרטי הורה משני (אופציונלי) */}
      <AnimatedSection expanded={expandedSections.secondaryParent}>
        <SectionHeader onClick={() => toggleSection("secondaryParent")}>
          <SectionIcon expanded={expandedSections.secondaryParent}>
            <PersonAddIcon />
          </SectionIcon>
          <SectionTitle
            variant="h6"
            expanded={expandedSections.secondaryParent}
          >
            פרטי הורה משני
            <Chip
              label="אופציונלי"
              size="small"
              color={expandedSections.secondaryParent ? "info" : "default"}
              sx={{ ml: 1, fontSize: "0.75rem" }}
            />
          </SectionTitle>
          <Tooltip title="פרטי הורה משני אינם חובה אך מומלצים למילוי">
            <InfoIcon
              fontSize="small"
              sx={{ mx: 1, color: theme.palette.info.main }}
            />
          </Tooltip>
          <Box sx={{ ml: "auto" }}>
            <IconButton
              size="small"
              color={expandedSections.secondaryParent ? "primary" : "default"}
              sx={{
                transform: expandedSections.secondaryParent
                  ? "rotate(-90deg)"
                  : "rotate(0deg)",
                transition: "transform 0.3s ease",
              }}
            >
              <NextIcon />
            </IconButton>
          </Box>
        </SectionHeader>

        <Collapse in={expandedSections.secondaryParent}>
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent2FirstName"
                  name="parent2FirstName"
                  label="שם פרטי"
                  placeholder="שם פרטי ההורה"
                  value={formik.values.parent2FirstName}
                  onChange={formik.handleChange}
                  error={
                    formik.touched.parent2FirstName &&
                    Boolean(formik.errors.parent2FirstName)
                  }
                  helperText={
                    formik.touched.parent2FirstName &&
                    formik.errors.parent2FirstName
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="info" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent2LastName"
                  name="parent2LastName"
                  label="שם משפחה"
                  placeholder="שם משפחה ההורה"
                  value={formik.values.parent2LastName}
                  onChange={formik.handleChange}
                  error={
                    formik.touched.parent2LastName &&
                    Boolean(formik.errors.parent2LastName)
                  }
                  helperText={
                    formik.touched.parent2LastName &&
                    formik.errors.parent2LastName
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="info" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent2Mobile"
                  name="parent2Mobile"
                  label="טלפון נייד"
                  placeholder="05X-XXXXXXX"
                  value={formik.values.parent2Mobile}
                  onChange={formik.handleChange}
                  error={
                    formik.touched.parent2Mobile &&
                    Boolean(formik.errors.parent2Mobile)
                  }
                  helperText={
                    formik.touched.parent2Mobile && formik.errors.parent2Mobile
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <CallIcon color="info" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent2Email"
                  name="parent2Email"
                  label="דוא״ל"
                  type="email"
                  placeholder="example@mail.com"
                  value={formik.values.parent2Email}
                  onChange={formik.handleChange}
                  error={
                    formik.touched.parent2Email &&
                    Boolean(formik.errors.parent2Email)
                  }
                  helperText={
                    formik.touched.parent2Email && formik.errors.parent2Email
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <EmailIcon color="info" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="parent2Address"
                  name="parent2Address"
                  label="כתובת (אם שונה מכתובת הילד)"
                  placeholder="רחוב, מספר בית, שכונה"
                  value={formik.values.parent2Address}
                  onChange={formik.handleChange}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <HomeIcon color="info" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <FormControl fullWidth>
                  <InputLabel id="parent2CityName-label">עיר הורה</InputLabel>
                  <Select
                    labelId="parent2CityName-label"
                    id="parent2CityName"
                    name="parent2CityName"
                    value={formik.values.parent2CityName}
                    onChange={formik.handleChange}
                    label="עיר הורה"
                    startAdornment={
                      <InputAdornment position="start">
                        <CityIcon color="info" fontSize="small" />
                      </InputAdornment>
                    }
                  >
                    <MenuItem value="">
                      <em>זהה לעיר הילד</em>
                    </MenuItem>
                    {citiesStatus === "loading" ? (
                      <MenuItem value="" disabled>
                        <CircularProgress size={20} />
                        טוען ערים...
                      </MenuItem>
                    ) : (
                      cities.map((city) => (
                        <MenuItem key={city.id || city.name} value={city.name}>
                          {city.name}
                        </MenuItem>
                      ))
                    )}
                  </Select>
                </FormControl>
              </Grid>
            </Grid>
          </CardContent>
        </Collapse>
      </AnimatedSection>

      {/* חלק 4: פרטי קשר נוספים
      <AnimatedSection expanded={expandedSections.contactInfo}>
        <SectionHeader onClick={() => toggleSection("contactInfo")}>
          <SectionIcon expanded={expandedSections.contactInfo}>
            <PhoneIcon />
          </SectionIcon>
          <SectionTitle variant="h6" expanded={expandedSections.contactInfo}>
            פרטי קשר נוספים
            <Chip
              label="חשוב למילוי"
              size="small"
              color={expandedSections.contactInfo ? "warning" : "default"}
              sx={{ ml: 1, fontSize: "0.75rem" }}
            />
          </SectionTitle>
          <Box sx={{ ml: "auto" }}>
            <IconButton
              size="small"
              color={expandedSections.contactInfo ? "primary" : "default"}
              sx={{
                transform: expandedSections.contactInfo
                  ? "rotate(-90deg)"
                  : "rotate(0deg)",
                transition: "transform 0.3s ease",
              }}
            >
              <NextIcon />
            </IconButton>
          </Box>
        </SectionHeader>

        <Collapse in={expandedSections.contactInfo}>
          <CardContent>
            <Grid container spacing={3}>
              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="homePhone"
                  name="homePhone"
                  label="טלפון בבית"
                  placeholder="0X-XXXXXXX"
                  value={formik.values.homePhone}
                  onChange={formik.handleChange}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <CallIcon color="warning" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="emergencyContactName"
                  name="emergencyContactName"
                  label="איש קשר בשעת חירום"
                  placeholder="שם מלא"
                  value={formik.values.emergencyContactName}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.emergencyContactName &&
                    Boolean(formik.errors.emergencyContactName)
                  }
                  helperText={
                    formik.touched.emergencyContactName &&
                    formik.errors.emergencyContactName
                  }
                  required
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <PersonIcon color="error" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="emergencyContactPhone"
                  name="emergencyContactPhone"
                  label="טלפון איש קשר חירום"
                  placeholder="0X-XXXXXXX"
                  value={formik.values.emergencyContactPhone}
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  error={
                    formik.touched.emergencyContactPhone &&
                    Boolean(formik.errors.emergencyContactPhone)
                  }
                  helperText={
                    formik.touched.emergencyContactPhone &&
                    formik.errors.emergencyContactPhone
                  }
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <CallIcon color="error" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                  required
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <TextField
                  fullWidth
                  id="socialWorker"
                  name="socialWorker"
                  label="עובד סוציאלי"
                  placeholder="שם העובד הסוציאלי"
                  value={formik.values.socialWorker}
                  onChange={formik.handleChange}
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <MedicalIcon color="warning" fontSize="small" />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <DatePicker
                  label="תאריך הפניה"
                  value={formik.values.referralDate}
                  onChange={(date) =>
                    formik.setFieldValue("referralDate", date)
                  }
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      id="referralDate"
                      name="referralDate"
                      fullWidth
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <EventIcon color="warning" fontSize="small" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  )}
                />
              </Grid>

              <Grid item xs={12} sm={6}>
                <DatePicker
                  label="תאריך כניסה מתוכנן"
                  value={formik.values.plannedEntryDate}
                  onChange={(date) =>
                    formik.setFieldValue("plannedEntryDate", date)
                  }
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      id="plannedEntryDate"
                      name="plannedEntryDate"
                      fullWidth
                      InputProps={{
                        startAdornment: (
                          <InputAdornment position="start">
                            <EventIcon color="warning" fontSize="small" />
                          </InputAdornment>
                        ),
                      }}
                    />
                  )}
                />
              </Grid>
            </Grid>
          </CardContent>
        </Collapse>
      </AnimatedSection> */}

      {/* סיכום והשלמה */}
      <Box sx={{ mt: 2, mb: 2 }}>
        <Alert
          severity={isFormFilled ? "info" : "warning"}
          variant="outlined"
          sx={{ borderRadius: 2 }}
          icon={isFormFilled ? <InfoIcon /> : <InfoIcon />}
        >
          <AlertTitle>
            {isFormFilled ? "הטופס מוכן לשמירה" : "יש להשלים את הטופס"}
          </AlertTitle>
          {isFormFilled
            ? "השלמת את מילוי הטופס. לאחר שמירה תועבר לשלב הבא בתהליך קליטת הילד."
            : "יש למלא את כל שדות החובה (מסומנים ב-*) לפני המשך התהליך."}
        </Alert>
      </Box>

      {/* כפתורי פעולה בתחתית הטופס */}
      <Paper
        elevation={3}
        sx={{
          borderRadius: 2,
          overflow: "hidden",
          mt: 4,
        }}
      >
        <ActionButtonsContainer>
          <AnimatedButton
            variant="outlined"
            color="error"
            onClick={() => {
              Swal.fire({
                title: "האם אתה בטוח?",
                text: "הפעולה תנקה את כל השדות!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonText: "כן, נקה טופס",
                cancelButtonText: "ביטול",
                reverseButtons: true,
              }).then((result) => {
                if (result.isConfirmed) {
                  formik.resetForm();
                  Swal.fire({
                    title: "נוקה!",
                    text: "הטופס נוקה בהצלחה.",
                    icon: "success",
                    timer: 1000,
                    showConfirmButton: false,
                  });
                }
              });
            }}
            startIcon={<DeleteIcon />}
            disabled={isLoading}
            sx={{ borderRadius: "50px", px: 3 }}
          >
            נקה טופס
          </AnimatedButton>

          <Box>
            <AnimatedButton
              type="submit"
              variant="contained"
              color="primary"
              startIcon={
                isLoading ? (
                  <CircularProgress size={20} color="inherit" />
                ) : isEditMode ? (
                  <EditIcon />
                ) : (
                  <SaveIcon />
                )
              }
              // disabled={isLoading}
              sx={{
                borderRadius: "50px",
                px: 4,
                background: "linear-gradient(45deg, #2196F3 30%, #21CBF3 90%)",
                boxShadow: "0 3px 5px 2px rgba(33, 203, 243, .3)",
              }}
            >
              {isEditMode ? "עדכן פרטים" : "שמור פרטים והמשך"}
            </AnimatedButton>
          </Box>
        </ActionButtonsContainer>
      </Paper>
    </form>
  );
};

export default PersonalInfoForm;